<?php
//activate
if (! function_exists('activate_cart_goal_addon')) {
    function activate_cart_goal_addon($StoreThemes, $shop) {
        foreach ($StoreThemes as $theme) {

            // Update schema file
            try{
                $schema = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'config/settings_schema.json'] ]
                )['body']['asset']['value'] ?? '';

                $liveview_addon_schema = (string) '
  {
    "name": "Cart goal",
    "settings": [
      {
        "type": "header",
        "content": "Activation"
      },
      {
        "type": "checkbox",
        "id": "dbtfy_cart_goal",
        "label": "Activate",
        "default": false
      },
      {
        "type": "header",
        "content": "Settings"
      },
      {
        "type": "text",
        "id": "dbtfy_cart_goal_before_text",
        "label": "Prefix",
        "default": "Buy"
      },
      {
        "type": "number",
        "id": "dbtfy_cart_goal_amount",
        "label": "Goal amount",
        "default": 70,
        "info": "Set up your free [shipping rates](/admin/settings/shipping) matching the amount entered above"
      },
      {
        "type": "text",
        "id": "dbtfy_cart_goal_after_text",
        "label": "Suffix",
        "default": "more to enjoy FREE shipping!"
      },
      {
        "type": "text",
        "id": "dbtfy_cart_goal_reached_text",
        "label": "Goal reached",
        "default": "You are eligible for FREE shipping!"
      },
      {
        "type": "text",
        "id": "dbtfy_cart_goal_icon",
        "label": "Icon",
        "default": "shipping-fast",
        "info": "Enter the name of any free solid icons on [FontAwesome](https:\/\/fontawesome.com\/icons?d=gallery&s=solid&m=free)"
      }
    ]
  }';

                if( ( $badgePos = strpos( $schema , 'dbtfy_cart_goal' ) ) === false ) {
                    if( ( $pos = strrpos( $schema , ']' ) ) !== false ) {
                        $updated_schema    = substr_replace( $schema , ",".$liveview_addon_schema."]" , $pos );
                        $update_schema_settings = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'config/settings_schema.json', 'value' => $updated_schema] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update schema on cart goal addon throws client exception');
            }
            catch(\Exception $e){
                logger('update schema on cart goal addon throws exception');
            }

            // add snippet
            try{
                $snippet = (string) '{%- comment -%}Please do not edit this file. Any modification can be lost as it is automatically updated by Debutify{%- endcomment -%}
{%- if settings.dbtfy_cart_goal -%}
{% assign goal = settings.dbtfy_cart_goal_amount %}
{% assign cart_total = cart.total_price | divided_by: 100 %}
{% assign percentage_reached = cart_total | times: 100 | divided_by: goal %}
<div class="dbtfy dbtfy-cart_goal"
     data-goal-amount="{{ goal }}"
     data-before-amount-text="{{ settings.dbtfy_cart_goal_before_text }}"
     data-after-amount-text="{{ settings.dbtfy_cart_goal_after_text }}"
     data-goal-reached-text="{{ settings.dbtfy_cart_goal_reached_text }}">

  <div class="cg-wrapper" {% if cart.item_count == 0 %}style="display:none"{% endif %}>
    <div class="cg-free-shipping-text">
      {% if goal > cart_total %}
      <span>{{ settings.dbtfy_cart_goal_before_text }} <span class="cg-goal-amount">{{ goal | minus: cart_total | times: 100 | money }}</span> {{ settings.dbtfy_cart_goal_after_text }}</span>
      {% else %}
      	<span>{{ settings.dbtfy_cart_goal_reached_text }}</span>
      {% endif %}
    </div>
    <div class="cg-free-shipping-bar">
      <div class="cg-progress-bar cg-progress-bar-animated cg-progress-bar-striped" role="progressbar" style="width:{{percentage_reached}}%"></div>
      {% if settings.dbtfy_cart_goal_icon != blank %}
      <span class="cg-icon">
        <span class="fas fa-{{ settings.dbtfy_cart_goal_icon }}"></span>
      </span>
      {% endif %}
    </div>
  </div>
</div>
{%- endif -%}';

                $snippet = addScriptTagCondition($shop, '{%- comment -%}Please do not edit this file. Any modification can be lost as it is automatically updated by Debutify{%- endcomment -%}', $snippet);

                $create_trustbadge_snippet = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/dbtfy-cart-goal.liquid', 'value' => $snippet] ]
                );
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('add cartGoal throws client exception');
            }
            catch(\Exception $e){
                logger('add cartGoal throws exception');
            }

            // add js addon
            try{
              $script= (string)'/* start-dbtfy-cart-goal */ function themeCartGoal() { {% if settings.dbtfy_cart_goal %} var _0x9afb=["\x61\x6A\x61\x78\x43\x61\x72\x74\x2E\x61\x66\x74\x65\x72\x43\x61\x72\x74\x4C\x6F\x61\x64","\x2E\x64\x62\x74\x66\x79\x2D\x63\x61\x72\x74\x5F\x67\x6F\x61\x6C","\x62\x65\x66\x6F\x72\x65\x2D\x61\x6D\x6F\x75\x6E\x74\x2D\x74\x65\x78\x74","\x64\x61\x74\x61","\x61\x66\x74\x65\x72\x2D\x61\x6D\x6F\x75\x6E\x74\x2D\x74\x65\x78\x74","\x67\x6F\x61\x6C\x2D\x72\x65\x61\x63\x68\x65\x64\x2D\x74\x65\x78\x74","\x67\x6F\x61\x6C\x2D\x61\x6D\x6F\x75\x6E\x74","\x2E\x63\x67\x2D\x77\x72\x61\x70\x70\x65\x72","\x2E\x63\x67\x2D\x66\x72\x65\x65\x2D\x73\x68\x69\x70\x70\x69\x6E\x67\x2D\x74\x65\x78\x74","\x2E\x63\x67\x2D\x70\x72\x6F\x67\x72\x65\x73\x73\x2D\x62\x61\x72","\x74\x6F\x74\x61\x6C\x5F\x70\x72\x69\x63\x65","\x3C\x73\x70\x61\x6E\x3E","\x3C\x2F\x73\x70\x61\x6E\x3E","\x6D\x6F\x6E\x65\x79\x46\x6F\x72\x6D\x61\x74","\x73\x74\x72\x69\x6E\x67\x73","\x20\x3C\x73\x70\x61\x6E\x20\x63\x6C\x61\x73\x73\x3D\x27\x63\x67\x2D\x67\x6F\x61\x6C\x2D\x61\x6D\x6F\x75\x6E\x74\x27\x3E","\x66\x6F\x72\x6D\x61\x74\x4D\x6F\x6E\x65\x79","\x43\x75\x72\x72\x65\x6E\x63\x79","\x3C\x2F\x73\x70\x61\x6E\x3E\x20","\x68\x74\x6D\x6C","\x77\x69\x64\x74\x68","\x25","\x63\x73\x73","\x73\x68\x6F\x77","\x69\x74\x65\x6D\x5F\x63\x6F\x75\x6E\x74","\x68\x69\x64\x65","\x6F\x6E","\x62\x6F\x64\x79"];function themeCartGoal(){$(_0x9afb[27])[_0x9afb[26]](_0x9afb[0],function(_0xcd0cx2,_0xcd0cx3){var _0xcd0cx4=$(_0x9afb[1]),_0xcd0cx5=_0xcd0cx4[_0x9afb[3]](_0x9afb[2]),_0xcd0cx6=_0xcd0cx4[_0x9afb[3]](_0x9afb[4]),_0xcd0cx7=_0xcd0cx4[_0x9afb[3]](_0x9afb[5]),_0xcd0cx8=parseFloat(_0xcd0cx4[_0x9afb[3]](_0x9afb[6])),_0xcd0cx9=$(_0x9afb[7]),_0xcd0cxa=$(_0x9afb[8]),_0xcd0cxb=$(_0x9afb[9]),_0xcd0cxc=_0xcd0cx3[_0x9afb[10]]/ 100,_0xcd0cxd=parseInt(_0xcd0cx8- _0xcd0cxc),_0xcd0cxe=0,_0xcd0cxf=_0x9afb[11]+ _0xcd0cx7+ _0x9afb[12];if(0< _0xcd0cxd){_0xcd0cxe= 100* (_0xcd0cx8- _0xcd0cxd)/ _0xcd0cx8;var _0xcd0cx10=theme[_0x9afb[14]][_0x9afb[13]];_0xcd0cxf= _0x9afb[11]+ _0xcd0cx5+ _0x9afb[15]+ theme[_0x9afb[17]][_0x9afb[16]](100* _0xcd0cxd,_0xcd0cx10)+ _0x9afb[18]+ _0xcd0cx6+ _0x9afb[12]}else {_0xcd0cxe= 100};_0xcd0cxa[_0x9afb[19]](_0xcd0cxf),_0xcd0cxb[_0x9afb[22]](_0x9afb[20],_0xcd0cxe+ _0x9afb[21]),_0xcd0cx9[_0x9afb[23]](),_0xcd0cx3[_0x9afb[24]]|| _0xcd0cx9[_0x9afb[25]]()})}themeCartGoal() {% endif %} } /* end-dbtfy-cart-goal */';

                // add js register
                $theme_js_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $theme_js_content , "/* start-register-cart-goal */" ) ) === false ) {
                        $new_theme_js = str_replace('var sections = new theme.Sections();', 'var sections = new theme.Sections();/* start-register-cart-goal */themeCartGoal();/* end-register-cart-goal */', $theme_js_content);

                    $add_js = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js] ]
                    );
                }

                $theme_js_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid'] ]
                )['body']['asset']['value'] ?? '';
                $replace_code= '/* start-dbtfy-addons */';
                if( ( $pos = strpos( $theme_js_content , 'start-dbtfy-cart-goal' ) ) === false ) {
                        $new_theme_js = str_replace($replace_code, $replace_code.$script, $theme_js_content);

                    $add_js = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js] ]
                    );
                }
            }catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update js on cart goal addon throws client exception');
            }
            catch(\Exception $e){
                logger('update js on cart goal addon throws exception');
            }

            // add scss
            try{
                $styles = (string) '/* start-dbtfy-cart-goal */{% if settings.dbtfy_cart_goal %}.dbtfy-cart_goal{.cg-wrapper{margin-bottom:$gutter}.cg-free-shipping-text{margin-bottom:$spacer;text-align:center}.cg-goal-amount{@include accentFontStack;color:$colorSecondary;#CartDrawer &{color:$colorDrawerPrimary}}.cg-free-shipping-bar{max-width:$drawerCartWidth;margin:auto;height:10px;border-radius:$borderRadius;background-color:$colorDefault;@include display-flexbox;@include align-items(center);#CartDrawer &{background-color:$colorDrawerDefault}.cg-progress-bar{background-color:$colorSecondary;border-top-left-radius:$borderRadius;border-bottom-left-radius:$borderRadius;height:100%;#CartDrawer &{background-color:$colorDrawerPrimary}&.cg-progress-bar-animated{@include animation(progress-bar-stripes 1s linear infinite)}&.cg-progress-bar-striped{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent);background-size:1rem 1rem}}}.cg-icon{height:$gutter;min-width:$gutter;background-color:$colorBody;border:$borders;border-color:$colorSecondary;margin-left:-1px;font-size:$baseFontSize-sm;border-radius:$circle;@include display-flexbox;@include align-items(center);@include justify-content(center);span{color:$colorSecondary}#CartDrawer &{background-color:$colorDrawer;border-color:$colorDrawerPrimary;span{color:$colorDrawerPrimary}}}@include keyframes(progress-bar-stripes){0%{background-position:1rem 0}100%{background-position:0 0}}}{% endif %}/* end-dbtfy-cart-goal */';

                $theme_style_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/theme.scss.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $theme_style_content , 'start-dbtfy-cart-goal' ) ) === false ) {
                    $new_theme_styles = str_replace($theme_style_content, $theme_style_content.$styles, $theme_style_content);
                    $add_styles = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/theme.scss.liquid', 'value' => $new_theme_styles] ]
                    );
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update CSS on cart goal addon throws client exception');
            }
            catch(\Exception $e){
                logger('update CSS on cart goal addon throws exception');
            }

            // add include to ajax-cart-template.liquid
            try{
                $ajaxcart_template = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/ajax-cart-template.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $ajaxcart_template , 'dbtfy-cart-goal' ) ) === false ) {
                    if( ( $pos = strrpos( $ajaxcart_template , '{{#items}}' ) ) !== false ) {
                        $new_ajaxcart_template = str_replace('{{#items}}', '{% endraw %}{% include "dbtfy-cart-goal" %}{% raw %}{{#items}}', $ajaxcart_template);
                        $update_ajaxcart_template = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'snippets/ajax-cart-template.liquid', 'value' => $new_ajaxcart_template] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update cart goal include throws client exception');
            }
            catch(\Exception $e){
                logger('update cart goal include throws exception');
            }

            // add include cart.liquid
            try{
                $cart_template = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'templates/cart.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $cart_template , 'dbtfy-cart-goal' ) ) === false ) {
                    if( ( $pos = strrpos( $cart_template , '{% if cart.item_count == 0 %}' ) ) !== false ) {
                        $new_cart_template = str_replace('{% if cart.item_count == 0 %}', '{% include "dbtfy-cart-goal" %}{% if cart.item_count == 0 %}', $cart_template);
                        $update_cart_template = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'templates/cart.liquid', 'value' => $new_cart_template] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update cart goal include throws client exception');
            }
            catch(\Exception $e){
                logger('update cart goal include throws exception');
            }

        }
    }
}

//deativate
if (! function_exists('deactivate_cart_goal_addon')) {
    function deactivate_cart_goal_addon($StoreThemes, $shop, $checkaddon) {
        foreach ($StoreThemes as $theme) {

            // remove schema
            $schema_get = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'config/settings_schema.json'] ]
            )['body'];

            if(!isset($schema_get['asset']['value']))
            {
                deactivate_cart_goal_addon_curl($theme, $shop);
                continue;
            }
            else
            {
                $schema = $schema_get['asset']['value'];
            }

            $json = json_decode($schema, true);
            $json = array_filter($json, function ($obj) {
              if (stripos($obj['name'], 'Cart goal') !== false) {
                  return false;
              }
              return true;
            });

            if(str_contains($schema,'Cart goal')){
                $value = json_encode(array_values($json));
                $updated_schema = $value;
                $update_schema_settings = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'config/settings_schema.json', 'value' => $updated_schema] ]
                );
            }

            // remove scss
            $theme_style_content = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'assets/theme.scss.liquid'] ]
            )['body']['asset']['value'] ?? '';

            $trustbadge_Style = (string) '/* start-dbtfy-cart-goal */';
            $end = (string) '/* end-dbtfy-cart-goal */';
            $string = ' ' . $theme_style_content;
            $ini = strpos($string, $trustbadge_Style);

            if ($ini == 0) {
              $parsed = '';
            }else{
              $ini += strlen($trustbadge_Style);
              $len = strpos($string, $end, $ini) - $ini;
              $parsed = substr($string, $ini, $len);
            }
            $values = $trustbadge_Style.''.$parsed.''.$end;

            if(str_contains($theme_style_content,'.dbtfy-cart_goal')){
                $value = str_replace($values, " ", $theme_style_content);
                $new_theme_styles = (string) $value;

                $update_styles = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/theme.scss.liquid', 'value' => $new_theme_styles] ]
                );
            }

            // remove snippet
            $delete_trustbadge_snippet = $shop->api()->request(
                'DELETE',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'snippets/dbtfy-cart-goal.liquid'] ]
            );

            // remove include - ajax-cart-template.liquid
             $ajaxcart_template = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'snippets/ajax-cart-template.liquid'] ]
            )['body']['asset']['value'] ?? '';

            if(str_contains($ajaxcart_template,'dbtfy-cart-goal')){
                $value  =  explode('{% endraw %}{% include "dbtfy-cart-goal" %}{% raw %}',$ajaxcart_template,2);

                if(isset($value[0]) && isset($value[1])){
                    $value = $value[0].' '.$value[1];
                }
                else{
                    $value = (string) $ajaxcart_template;
                }

                 $new_ajaxcart_template = (string) $value;
                 $update_ajaxcart_template = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/ajax-cart-template.liquid', 'value' => $new_ajaxcart_template] ]
                );
            }

            // remove include - cart.liquid
            $cart_template = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'templates/cart.liquid'] ]
            )['body']['asset']['value'] ?? '';

            if(str_contains($cart_template,'dbtfy-cart-goal')){
                $value  =  explode('{% include "dbtfy-cart-goal" %}',$cart_template,2);

                if(isset($value[0]) && isset($value[1])){
                    $value = $value[0].' '.$value[1];
                }
                else{
                    $value = (string) $cart_template;
                }

                $new_cart_template = (string) $value;
                $update_cart_template = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'templates/cart.liquid', 'value' => $new_cart_template] ]
                );
            }

            // remove js addon
            try{
               $theme_js_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid'] ]
                )['body']['asset']['value'] ?? '';

                $trustbadge_js = (string) '/* start-dbtfy-cart-goal */';
                $end_js = (string) '/* end-dbtfy-cart-goal */';
                $string_js = ' ' . $theme_js_content;
                $ini_js = strpos($string_js, $trustbadge_js);
                if ($ini_js == 0) {
                    $parsed_js = '';
                } else{
                    $ini_js += strlen($trustbadge_js);
                    $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
                    $parsed_js = substr($string_js, $ini_js, $len_js);
                }
                $value_js = $trustbadge_js.''.$parsed_js.''.$end_js;
                if(!empty($theme_js_content) && str_contains($theme_js_content,'/* start-dbtfy-cart-goal */')){
                    $value = str_replace($value_js, " ", $theme_js_content);
                    $new_theme_js = (string) $value;
                    if(str_contains($new_theme_js,'/* start-register-cart-goal */')){
                        $trustbadge_js1 = (string) '/* start-register-cart-goal */';
                        $end_js = (string) '/* end-register-cart-goal */';
                        $string_js = ' ' . $new_theme_js;
                        $ini_js = strpos($string_js, $trustbadge_js1);
                        if ($ini_js == 0) {
                            $parsed_js = '';
                        } else{
                            $ini_js += strlen($trustbadge_js1);
                            $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
                            $parsed_js = substr($string_js, $ini_js, $len_js);
                        }
                        $value_js = $trustbadge_js1.''.$parsed_js.''.$end_js;

                        $value = str_replace($value_js, " ", $new_theme_js);
                        $new_theme_js1 = (string) $value;
                        $update_js = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js1] ]
                        );
                    }
                    else{
                        $update_js = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('remove cart goal throws client exception');
            }
            catch(\Exception $e){
                logger('remove cart goal throws exception');
            }
        }
    }
}


if (! function_exists('deactivate_cart_goal_addon_curl')) {
    function deactivate_cart_goal_addon_curl($theme, $shop) {

        // remove schema
        $schema = getThemeFileCurl($shop, $theme, 'config/settings_schema.json');

        $json = json_decode($schema, true);
        $json = array_filter($json, function ($obj) {
          if (stripos($obj['name'], 'Cart goal') !== false) {
              return false;
          }
          return true;
        });

        if(str_contains($schema,'Cart goal')){
            $value = json_encode(array_values($json));
            $updated_schema = $value;
            $update_schema_settings = putThemeFileCurl($shop, $theme, $updated_schema, 'config/settings_schema.json');
        }

        // remove scss
        $theme_style_content = getThemeFileCurl($shop, $theme, 'assets/theme.scss.liquid');

        $trustbadge_Style = (string) '/* start-dbtfy-cart-goal */';
        $end = (string) '/* end-dbtfy-cart-goal */';
        $string = ' ' . $theme_style_content;
        $ini = strpos($string, $trustbadge_Style);

        if ($ini == 0) {
          $parsed = '';
        }else{
          $ini += strlen($trustbadge_Style);
          $len = strpos($string, $end, $ini) - $ini;
          $parsed = substr($string, $ini, $len);
        }
        $values = $trustbadge_Style.''.$parsed.''.$end;

        if(str_contains($theme_style_content,'.dbtfy-cart_goal')){
            $value = str_replace($values, " ", $theme_style_content);
            $new_theme_styles = (string) $value;

            $update_styles = putThemeFileCurl($shop, $theme, $new_theme_styles, 'assets/theme.scss.liquid');
        }

        // remove snippet
        $delete_trustbadge_snippet = deleteThemeFilesCurl($shop, $theme, 'snippets/dbtfy-cart-goal.liquid');

        // remove include - ajax-cart-template.liquid
         $ajaxcart_template = getThemeFileCurl($shop, $theme, 'snippets/ajax-cart-template.liquid');

        if(str_contains($ajaxcart_template,'dbtfy-cart-goal')){
            $value  =  explode('{% endraw %}{% include "dbtfy-cart-goal" %}{% raw %}',$ajaxcart_template,2);

            if(isset($value[0]) && isset($value[1])){
                $value = $value[0].' '.$value[1];
            }
            else{
                $value = (string) $ajaxcart_template;
            }

             $new_ajaxcart_template = (string) $value;
             $update_ajaxcart_template = putThemeFileCurl($shop, $theme, $new_ajaxcart_template, 'snippets/ajax-cart-template.liquid');
        }

        // remove include - cart.liquid
        $cart_template = getThemeFileCurl($shop, $theme, 'templates/cart.liquid');

        if(str_contains($cart_template,'dbtfy-cart-goal')){
            $value  =  explode('{% include "dbtfy-cart-goal" %}',$cart_template,2);

            if(isset($value[0]) && isset($value[1])){
                $value = $value[0].' '.$value[1];
            }
            else{
                $value = (string) $cart_template;
            }

            $new_cart_template = (string) $value;
            $update_cart_template = putThemeFileCurl($shop, $theme, $new_cart_template, 'templates/cart.liquid');
        }

        // remove js addon
        try{
           $theme_js_content = getThemeFileCurl($shop, $theme, 'assets/dbtfy-addons.js.liquid');
            if ($theme_js_content == null)
            {
                $theme_js_content = '';
            }
            $trustbadge_js = (string) '/* start-dbtfy-cart-goal */';
            $end_js = (string) '/* end-dbtfy-cart-goal */';
            $string_js = ' ' . $theme_js_content;
            $ini_js = strpos($string_js, $trustbadge_js);
            if ($ini_js == 0) {
                $parsed_js = '';
            } else{
                $ini_js += strlen($trustbadge_js);
                $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
                $parsed_js = substr($string_js, $ini_js, $len_js);
            }
            $value_js = $trustbadge_js.''.$parsed_js.''.$end_js;
            if(!empty($theme_js_content) && str_contains($theme_js_content,'/* start-dbtfy-cart-goal */')){
                $value = str_replace($value_js, " ", $theme_js_content);
                $new_theme_js = (string) $value;
                if(str_contains($new_theme_js,'/* start-register-cart-goal */')){
                    $trustbadge_js1 = (string) '/* start-register-cart-goal */';
                    $end_js = (string) '/* end-register-cart-goal */';
                    $string_js = ' ' . $new_theme_js;
                    $ini_js = strpos($string_js, $trustbadge_js1);
                    if ($ini_js == 0) {
                        $parsed_js = '';
                    } else{
                        $ini_js += strlen($trustbadge_js1);
                        $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
                        $parsed_js = substr($string_js, $ini_js, $len_js);
                    }
                    $value_js = $trustbadge_js1.''.$parsed_js.''.$end_js;

                    $value = str_replace($value_js, " ", $new_theme_js);
                    $new_theme_js1 = (string) $value;
                    $update_js = putThemeFileCurl($shop, $theme, $new_theme_js1, 'assets/dbtfy-addons.js.liquid');
                }
                else{
                    $update_js = putThemeFileCurl($shop, $theme, $new_theme_js, 'assets/dbtfy-addons.js.liquid');
                }
            }
        }
        catch(\GuzzleHttp\Exception\ClientException $e){
            logger('remove cart goal throws client exception');
        }
        catch(\Exception $e){
            logger('remove cart goal throws exception');
        }

    }
}
?>
