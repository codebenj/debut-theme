<?php
//activate
if (! function_exists('activate_cookibox_addon')) {
    function activate_cookibox_addon($StoreThemes, $shop) {

        foreach ($StoreThemes as $theme) {

            // add schema
            try{
                $schema = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'config/settings_schema.json'] ]
                )['body']['asset']['value'] ?? '';

                $liveview_addon_schema = (string) '{
    "name": "Cookie box",
    "settings": [
      {
        "type": "header",
        "content": "Activation"
      },
      {
        "type": "checkbox",
        "id": "dbtfy_cookie_box",
        "label": "Activate",
        "default": false
      },
      {
        "type": "header",
        "content": "Settings"
      },
      {
        "type": "checkbox",
        "id": "dbtfy_cookie_box_inverted",
        "label": "Use drawer colors",
        "default": true
      },
      {
        "type": "richtext",
        "id": "dbtfy_cookie_box_text",
        "label": "Text",
        "default": "<p><strong>Do you like cookies?<\/strong> üç™ We use cookies to ensure you get the best experience on our website.<\/p>"
      },
      {
        "type": "text",
        "id": "dbtfy_cookie_box_animation",
        "label": "Animation type",
        "default": "fadeIn",
        "info": "Enter the name of any animation from [animate.css](https:\/\/daneden.github.io\/animate.css\/)"
      },
      {
        "type": "text",
        "id": "dbtfy_cookie_box_button_label",
        "label": "Button label",
        "default": "Accept cookies"
      },
      {
        "type": "select",
        "id": "dbtfy_cookie_box_button_style",
        "label": "Button style",
        "default": "btn--primary",
        "options": [
          {
            "value": "",
            "label": "Default"
          },
          {
            "value": "btn--primary",
            "label": "Full"
          },
          {
            "value": "btn-outline-primary",
            "label": "Outline"
          }
        ]
      }
    ]
  }';

                if( ( $badgePos = strpos( $schema , 'dbtfy_cookie_box' ) ) === false ) {
                    if( ( $pos = strrpos( $schema , ']' ) ) !== false ) {
                        $updated_schema    = substr_replace( $schema , ",".$liveview_addon_schema."]" , $pos );

                        $update_schema_settings = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'config/settings_schema.json', 'value' => $updated_schema] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update schema on live view addon throws client exception');
            }
            catch(\Exception $e){
                logger('update schema on live view addon throws exception');
            }

            // add snippet
            try{
                $cookies_snippet = (string) '{%- comment -%}Please do not edit this file. Any modification can be lost as it is automatically updated by Debutify{%- endcomment -%}
                    {%- if settings.dbtfy_cookie_box -%}
                      {%- assign dbtfy_cookie_box_button_label = settings.dbtfy_cookie_box_button_label -%}

                      <div class="dbtfy dbtfy-cookie_box">
                        <div id="CookieBox" style="display:none;">
                          <div class="wrapper cb-wrapper">
                            <div class="cb-container {% if settings.dbtfy_cookie_box_inverted %}cb-inverted{% endif %} animated {{settings.dbtfy_cookie_box_animation}}">
                              <div class="grid grid-uniform grid--small cb-grid">
                                <div class="grid__item cb-text-item">
                                  <div class="rte small--text-center">
                                    {{ settings.dbtfy_cookie_box_text }}
                                  </div>
                                </div>
                                <div class="grid__item cb-button-item{% if dbtfy_cookie_box_button_label == blank %} content-center{% endif %}">
                                  {% unless dbtfy_cookie_box_button_label == blank %}
                                    <button class="btn {{ settings.dbtfy_cookie_box_button_style }} btn--small small--full cb-btn">
                                      {{ dbtfy_cookie_box_button_label | escape }}
                                    </button>
                                  {% endunless %}

                                  <button type="button" class="btn btn-square-small cb-btn-close">
                                    <span class="fas fa-times" aria-hidden="true"></span>
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    {%- endif -%}';

                $cookies_snippet = addScriptTagCondition($shop, '{%- comment -%}Please do not edit this file. Any modification can be lost as it is automatically updated by Debutify{%- endcomment -%}', $cookies_snippet);

                $create_trustbadge_snippet = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/dbtfy-cookie-box.liquid', 'value' => $cookies_snippet] ]
                );
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('add cookie_box throws client exception');
            }
            catch(\Exception $e){
                logger('add cookie_box throws exception');
            }

            // add scss
            try{
                $styles = (string) '/* start-dbtfy-cookie-box */{% if settings.dbtfy_cookie_box %}.dbtfy-cookie_box{#CookieBox{bottom:0; left: 0; right:0; width:100%; position:fixed; pointer-events:none; z-index: $zindexUnderOverlay;}.cb-wrapper{&.cb-box{padding:$gutter; @include screen($small){padding:$gutter-sm;}}}.cb-container{background: $colorBody; border-radius:$borderRadius; pointer-events:auto; padding: $gutter-sm; margin-bottom: $gutter; @include shadow($shadow); @include transition($transitions); @include screen($small){width:100%; margin-bottom: $gutter-sm;}&.cb-inverted{background-color: $colorDrawer; color: $colorDrawerText; .btn{@include button($colorDrawerDefault,$colorDrawerText); @include placeholder($colorDrawerText);}.btn--primary{@include button($colorDrawerPrimary,$colorDrawerButtonText);}.btn-outline-primary{@include button($colorDrawerPrimary,$colorDrawerButtonText,outline);}.text-link{color:$colorDrawerPrimary;}}.template-product.scroll-sticky_addtocart &{margin-bottom: $gutter+$heightInput+$gutter-sm; @include screen($small){margin-bottom: $gutter-sm+$heightInputSmall+$gutter-sm;}}}.cb-grid{@include screenUp($postSmall){@include align-items(center); @include flex-wrap(nowrap); .rte{margin-bottom:0;}}}.cb-button-item{@include display-flexbox(); @include flex-shrink(0); &.content-center{@include justify-content(center);}@include screenUp($postSmall){width:auto;}}.cb-btn{margin-right:$spacer-sm;}.cb-btn-close{@include flex-shrink(0);}}{% endif %}/* end-dbtfy-cookie-box */';

                $theme_style_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/theme.scss.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $theme_style_content , 'start-dbtfy-cookie-box' ) ) === false ) {
                        $new_theme_styles = str_replace($theme_style_content, $theme_style_content.$styles, $theme_style_content);

                    $add_styles = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/theme.scss.liquid', 'value' => $new_theme_styles] ]
                    );

                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update CSS on cookie_box addon throws client exception');
            }
            catch(\Exception $e){
                logger('update CSS on cookie_box addon throws exception');
            }

            // add js addon
            try{
              $script= (string)'/* start-dbtfy-cookie-box */ function themeCookieBox() { {%- if settings.dbtfy_cookie_box -%} var _0xf864=["\x2E\x64\x62\x74\x66\x79\x2D\x63\x6F\x6F\x6B\x69\x65\x5F\x62\x6F\x78","\x23\x43\x6F\x6F\x6B\x69\x65\x42\x6F\x78","\x2E\x63\x62\x2D\x62\x74\x6E\x2C\x20\x2E\x63\x62\x2D\x62\x74\x6E\x2D\x63\x6C\x6F\x73\x65","\x63\x6F\x6F\x6B\x69\x65\x62\x6F\x78\x43\x6C\x6F\x73\x65\x64","\x73\x68\x6F\x77","\x68\x69\x64\x65","\x74\x72\x75\x65","\x73\x65\x74\x49\x74\x65\x6D","\x63\x6C\x69\x63\x6B","\x73\x68\x6F\x70\x69\x66\x79\x3A\x73\x65\x63\x74\x69\x6F\x6E\x3A\x6C\x6F\x61\x64","\x72\x65\x6D\x6F\x76\x65\x49\x74\x65\x6D","\x6F\x6E"];function CookieBox(){$(_0xf864[0]);var _0xbf50x2=$(_0xf864[1]),_0xbf50x3=$(_0xf864[2]);localStorage[_0xf864[3]]|| _0xbf50x2[_0xf864[4]](),_0xbf50x3[_0xf864[8]](function(){_0xbf50x2[_0xf864[5]](),localStorage[_0xf864[7]](_0xf864[3],_0xf864[6])})}$(document)[_0xf864[11]](_0xf864[9],function(){localStorage[_0xf864[10]](_0xf864[3])}),CookieBox() {%- endif -%} }; /* end-dbtfy-cookie-box */';

                // add js register
                $theme_js_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $theme_js_content , "/* start-register-cookie-box */" ) ) === false ) {
                        $new_theme_js = str_replace('var sections = new theme.Sections();', 'var sections = new theme.Sections();/* start-register-cookie-box */themeCookieBox();/* end-register-cookie-box */', $theme_js_content);

                    $add_js = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js] ]
                    );
                }
                sleep(3);
                $theme_js_content1 = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid'] ]
                )['body']['asset']['value'] ?? '';
                $replace_code= '/* start-dbtfy-addons */';
                if( ( $pos = strpos( $theme_js_content1 , '/* start-dbtfy-cookie-box */' ) ) === false ) {
                    $new_theme_js = str_replace($replace_code, $replace_code.$script, $theme_js_content1);

                    $add_js = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js] ]
                    );
                }
            }catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update js on cookie_box addon throws client exception');
            }
            catch(\Exception $e){
                logger('update js on cookie_box addon throws exception');
            }

            // add include
            try{
                $product_template = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'layout/theme.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $product_template , 'dbtfy-cookie-box' ) ) === false ) {

                    if( ( $pos = strrpos( $product_template , '</body>' ) ) !== false ) {
                        $new_prod_template = str_replace('</body>', '{% include "dbtfy-cookie-box" %} </body>', $product_template);
                        $update_prod_template = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'layout/theme.liquid', 'value' => $new_prod_template] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update cookie_box on trustbadge addon throws client exception');
            }
            catch(\Exception $e){
                logger('update cookie_box on trustbadge addon throws exception');
            }
        }
    }
}

// deactivate
if (! function_exists('deactivate_cookibox_addon')) {
    function deactivate_cookibox_addon($StoreThemes, $shop, $checkaddon) {
        foreach ($StoreThemes as $theme) {

            // remove schema
            $schema_get = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'config/settings_schema.json'] ]
            )['body'];

            if(!isset($schema_get['asset']['value']))
            {
                deactivate_cookibox_addon_curl($theme, $shop);
                continue;
            }
            else
            {
                $schema = $schema_get['asset']['value'] ?? '';
            }

            $json = json_decode($schema, true);
            $json = array_filter($json, function ($obj) {
              if (stripos($obj['name'], 'Cookie bar') !== false || stripos($obj['name'], 'Cookie box') !== false ) {
                  return false;
              }
              return true;
            });

            if(str_contains($schema,'Cookie bar') || str_contains($schema,'Cookie box')){
                $value = json_encode(array_values($json));
                $updated_schema = $value;

                $update_schema_settings = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'config/settings_schema.json', 'value' => $updated_schema] ]
                );
            }

            // remove scss
            $theme_style_content = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'assets/theme.scss.liquid'] ]
            )['body']['asset']['value'] ?? '';

            // old style
            $styles = (string) '/*================ _Cookie_box ================*/ .dbtfy-cookie_box{ #CookieBox{ position:fixed;bottom: 0;right: 0;left: 0;background: $colorBody;padding: $gutter-sm 0;z-index:$zindexUnderOverlay;@include shadow($shadow);}.grid-cookie_box{ @include align-items(center);.rte{ @include screenUp($small){margin-bottom: 0px;}}} .grid__item-text-cookie_box{@include flex(1);}.grid__item-btn-cookie_box{@include display-flexbox();@include justify-content(center);@include flex-shrink(0); @include screenUp($small){width: auto; }}.btn--cookie_box{margin-right:$spacer-sm; }.btn--close-cookie_box{@include flex-shrink(0); } }';
            $trustbadge_Style2 = (string) '/*================ _Cookie_box ================*/';
            $end2 = (string) '.btn--close-cookie_box{@include flex-shrink(0); } }';
            $string2 = ' ' . $theme_style_content;
            $ini2 = strpos($string2, $trustbadge_Style2);
            if ($ini2 == 0) {
                $parsed2 = '';
            }else{
                $ini2 += strlen($trustbadge_Style2);
                $len2 = strpos($string2, $end2, $ini2) - $ini2;
                $parsed2 = substr($string2, $ini2, $len2);
            }

            // old style
            $trustbadge_Style3 = (string) '/*================ start-dbtfy-Cookie_box ================*/';
            $end3 = (string) '/*================ end-dbtfy-Cookie_box ================*/';
            $string3 = ' ' . $theme_style_content;
            $ini3 = strpos($string3, $trustbadge_Style3);
            if ($ini3 == 0) {
                $parsed3 = '';
            }else{
                $ini3 += strlen($trustbadge_Style3);
                $len3 = strpos($string3, $end3, $ini3) - $ini3;
                $parsed3 = substr($string3, $ini3, $len3);
            }

            // new style
            $trustbadge_Style = (string) '/* start-dbtfy-cookie-box */';
            $end = (string) '/* end-dbtfy-cookie-box */';
            $string = ' ' . $theme_style_content;
            $ini = strpos($string, $trustbadge_Style);
            if ($ini == 0) {
                $parsed = '';
            }else{
                $ini += strlen($trustbadge_Style);
                $len = strpos($string, $end, $ini) - $ini;
                $parsed = substr($string, $ini, $len);
            }

            // result
            if($parsed3){
                  $values = $trustbadge_Style3.''.$parsed3.''.$end3;
            }else if($parsed2){
                  $values = $trustbadge_Style2.''.$parsed2.''.$end2;
            }else{
              if($parsed){
                $values = $trustbadge_Style.''.$parsed.''.$end;
              }else{
                $values = $styles;
              }
            }

            if(str_contains($theme_style_content,'dbtfy-cookie_box')){
                $value = str_replace($values, " ", $theme_style_content);
                $new_theme_styles = (string) $value;
                $update_styles = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/theme.scss.liquid', 'value' => $new_theme_styles] ]
                );
            }

            // remove snippet
            $delete_trustbadge_snippet = $shop->api()->request(
                'DELETE',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'snippets/dbtfy-cookie-box.liquid'] ]
            );

            // Update product template
            $product_template = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'layout/theme.liquid'] ]
            )['body']['asset']['value'] ?? '';

            if(str_contains($product_template,'dbtfy-cookie-box')){
                $value  =  explode('{% include "dbtfy-cookie-box" %}',$product_template,2);

                if(isset($value[0]) && isset($value[1])){
                    $value = $value[0].' '.$value[1];
                }
                else{
                    $value = (string) $product_template;
                }

                $new_prod_template = (string) $value;
                $update_prod_template = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'layout/theme.liquid', 'value' => $new_prod_template] ]
                );
            }

            // remove js addon
            try{
              $theme_js_content = $shop->api()->request(
                  'GET',
                  '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                  ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid'] ]
              )['body']['asset']['value'] ?? '';

              $trustbadge_js = (string) '/* start-dbtfy-cookie-box */';
              $end_js = (string) '/* end-dbtfy-cookie-box */';
              $string_js = $theme_js_content;
              $ini_js = strpos($string_js, $trustbadge_js);
              if ($ini_js == 0) {
                  $parsed_js = '';
              }else{
                  $ini_js += strlen($trustbadge_js);
                  $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
                  $parsed_js = substr($string_js, $ini_js, $len_js);
              }
              $value_js = $trustbadge_js.''.$parsed_js.''.$end_js;
              if(!empty($theme_js_content) && str_contains($theme_js_content,'/* start-dbtfy-cookie-box */')){
                $value = str_replace($value_js, " ", $theme_js_content);
                $new_theme_js = (string) $value;
                // Remove another code
                if(str_contains($new_theme_js,'/* start-register-cookie-box */')){
                    $trustbadge_js1 = (string) '/* start-register-cookie-box */';
                    $end_js = (string) '/* end-register-cookie-box */';
                    $string_js = $new_theme_js;
                    $ini_js = strpos($string_js, $trustbadge_js1);
                    if ($ini_js == 0) {
                        $parsed_js = '';
                    }else{
                          $ini_js += strlen($trustbadge_js1);
                          $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
                          $parsed_js = substr($string_js, $ini_js, $len_js);
                    }
                    $value_js = $trustbadge_js1.''.$parsed_js.''.$end_js;
                    $value = str_replace($value_js, '', $new_theme_js);
                    $new_theme_js1 = (string) $value;
                    $update_js = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js1] ]
                    );
                  }else{
                    $update_js = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js] ]
                    );
                  }
              }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('add Addtocart_animation throws client exception');
            }
            catch(\Exception $e){
                logger('add Addtocart_animation throws exception');
            }
        }
    }
}


if (! function_exists('deactivate_cookibox_addon_curl')) {
    function deactivate_cookibox_addon_curl($theme, $shop) {

        // remove schema
        $schema = getThemeFileCurl($shop, $theme, 'config/settings_schema.json');

        $json = json_decode($schema, true);
        $json = array_filter($json, function ($obj) {
          if (stripos($obj['name'], 'Cookie bar') !== false || stripos($obj['name'], 'Cookie box') !== false ) {
              return false;
          }
          return true;
        });

        if(str_contains($schema,'Cookie bar') || str_contains($schema,'Cookie box')){
            $value = json_encode(array_values($json));
            $updated_schema = $value;

            $update_schema_settings = putThemeFileCurl($shop, $theme, $updated_schema, 'config/settings_schema.json');
        }

        // remove scss
        $theme_style_content = getThemeFileCurl($shop, $theme, 'assets/theme.scss.liquid');

        // old style
        $styles = (string) '/*================ _Cookie_box ================*/ .dbtfy-cookie_box{ #CookieBox{ position:fixed;bottom: 0;right: 0;left: 0;background: $colorBody;padding: $gutter-sm 0;z-index:$zindexUnderOverlay;@include shadow($shadow);}.grid-cookie_box{ @include align-items(center);.rte{ @include screenUp($small){margin-bottom: 0px;}}} .grid__item-text-cookie_box{@include flex(1);}.grid__item-btn-cookie_box{@include display-flexbox();@include justify-content(center);@include flex-shrink(0); @include screenUp($small){width: auto; }}.btn--cookie_box{margin-right:$spacer-sm; }.btn--close-cookie_box{@include flex-shrink(0); } }';
        $trustbadge_Style2 = (string) '/*================ _Cookie_box ================*/';
        $end2 = (string) '.btn--close-cookie_box{@include flex-shrink(0); } }';
        $string2 = ' ' . $theme_style_content;
        $ini2 = strpos($string2, $trustbadge_Style2);
        if ($ini2 == 0) {
            $parsed2 = '';
        }else{
            $ini2 += strlen($trustbadge_Style2);
            $len2 = strpos($string2, $end2, $ini2) - $ini2;
            $parsed2 = substr($string2, $ini2, $len2);
        }

        // old style
        $trustbadge_Style3 = (string) '/*================ start-dbtfy-Cookie_box ================*/';
        $end3 = (string) '/*================ end-dbtfy-Cookie_box ================*/';
        $string3 = ' ' . $theme_style_content;
        $ini3 = strpos($string3, $trustbadge_Style3);
        if ($ini3 == 0) {
            $parsed3 = '';
        }else{
            $ini3 += strlen($trustbadge_Style3);
            $len3 = strpos($string3, $end3, $ini3) - $ini3;
            $parsed3 = substr($string3, $ini3, $len3);
        }

        // new style
        $trustbadge_Style = (string) '/* start-dbtfy-cookie-box */';
        $end = (string) '/* end-dbtfy-cookie-box */';
        $string = ' ' . $theme_style_content;
        $ini = strpos($string, $trustbadge_Style);
        if ($ini == 0) {
            $parsed = '';
        }else{
            $ini += strlen($trustbadge_Style);
            $len = strpos($string, $end, $ini) - $ini;
            $parsed = substr($string, $ini, $len);
        }

        // result
        if($parsed3){
              $values = $trustbadge_Style3.''.$parsed3.''.$end3;
        }else if($parsed2){
              $values = $trustbadge_Style2.''.$parsed2.''.$end2;
        }else{
          if($parsed){
            $values = $trustbadge_Style.''.$parsed.''.$end;
          }else{
            $values = $styles;
          }
        }

        if(str_contains($theme_style_content,'dbtfy-cookie_box')){
            $value = str_replace($values, " ", $theme_style_content);
            $new_theme_styles = (string) $value;
            $update_styles = putThemeFileCurl($shop, $theme, $new_theme_styles, 'assets/theme.scss.liquid');
        }

        // remove snippet
        $delete_trustbadge_snippet = deleteThemeFilesCurl($shop, $theme, 'snippets/dbtfy-cookie-box.liquid');

        // Update product template
        $product_template = getThemeFileCurl($shop, $theme, 'layout/theme.liquid');

        if(str_contains($product_template,'dbtfy-cookie-box')){
            $value  =  explode('{% include "dbtfy-cookie-box" %}',$product_template,2);

            if(isset($value[0]) && isset($value[1])){
                $value = $value[0].' '.$value[1];
            }
            else{
                $value = (string) $product_template;
            }

            $new_prod_template = (string) $value;
            $update_prod_template = putThemeFileCurl($shop, $theme, $new_prod_template, 'layout/theme.liquid');
        }

        // remove js addon
        try{
          $theme_js_content = getThemeFileCurl($shop, $theme, 'assets/dbtfy-addons.js.liquid');
          if ($theme_js_content == null)
          {
              $theme_js_content = '';
          }
          $trustbadge_js = (string) '/* start-dbtfy-cookie-box */';
          $end_js = (string) '/* end-dbtfy-cookie-box */';
          $string_js = $theme_js_content;
          $ini_js = strpos($string_js, $trustbadge_js);
          if ($ini_js == 0) {
              $parsed_js = '';
          }else{
              $ini_js += strlen($trustbadge_js);
              $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
              $parsed_js = substr($string_js, $ini_js, $len_js);
          }
          $value_js = $trustbadge_js.''.$parsed_js.''.$end_js;
          if(!empty($theme_js_content) && str_contains($theme_js_content,'/* start-dbtfy-cookie-box */')){
            $value = str_replace($value_js, " ", $theme_js_content);
            $new_theme_js = (string) $value;
            // Remove another code
            if(str_contains($new_theme_js,'/* start-register-cookie-box */')){
                $trustbadge_js1 = (string) '/* start-register-cookie-box */';
                $end_js = (string) '/* end-register-cookie-box */';
                $string_js = $new_theme_js;
                $ini_js = strpos($string_js, $trustbadge_js1);
                if ($ini_js == 0) {
                    $parsed_js = '';
                }else{
                      $ini_js += strlen($trustbadge_js1);
                      $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
                      $parsed_js = substr($string_js, $ini_js, $len_js);
                }
                $value_js = $trustbadge_js1.''.$parsed_js.''.$end_js;
                $value = str_replace($value_js, '', $new_theme_js);
                $new_theme_js1 = (string) $value;
                $update_js = putThemeFileCurl($shop, $theme, $new_theme_js1, 'assets/dbtfy-addons.js.liquid');
              }else{
                $update_js = putThemeFileCurl($shop, $theme, $new_theme_js, 'assets/dbtfy-addons.js.liquid');
              }
          }
        }
        catch(\GuzzleHttp\Exception\ClientException $e){
            logger('add Addtocart_animation throws client exception');
        }
        catch(\Exception $e){
            logger('add Addtocart_animation throws exception');
        }
    }
}
?>
