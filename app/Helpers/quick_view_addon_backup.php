<?php
//activate
if (! function_exists('activate_quick_view_addon')) {
    function activate_quick_view_addon($StoreThemes, $shop) {
      	foreach ($StoreThemes as $theme) {

            // add schema
            try{
                $schema = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'config/settings_schema.json'] ]
                )['body']['asset']['value'] ?? '';

                $addon_schema = (string) '
  {
    "name": "Quick view",
    "settings": [
      {
        "type": "header",
        "content": "Activation"
      },
      {
        "type": "checkbox",
        "id": "dbtfy_quick_view",
        "label": "Activate",
        "default": false
      },
      {
        "type": "header",
        "content": "Settings"
      },
      {
        "type": "checkbox",
        "id": "dbtfy_quick_view_hide_mobile",
        "label": "Hide on mobile",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "dbtfy_quick_view_quantity_selector",
        "label": "Show quantity picker",
        "default": false
      },
      {
        "type": "text",
        "id": "quick_view_animation",
        "label": "Animation type",
        "default": "pulse",
        "info": "Enter the name of any animation from [animate.css](https:\/\/daneden.github.io\/animate.css\/)"
      },
      {
        "type": "text",
        "id": "quick_view_icon",
        "label": "Quick view icon",
        "default": "eye",
        "info": "Enter the name of any free solid icons on [FontAwesome](https:\/\/fontawesome.com\/icons?d=gallery&s=solid&m=free)"
      },
      {
        "type": "select",
        "id": "icon_placement",
        "label": "Icon placement",
        "default": "top-right",
        "options": [
          {
            "value": "top-left",
            "label": "Top left"
          },
          {
            "value": "top-right",
            "label": "Top right"
          },
          {
            "value": "bottom-right",
            "label": "Bottom right"
          },
          {
            "value": "bottom-left",
            "label": "Bottom left"
          }
        ]
      }
    ]
  }';

                if( ( $badgePos = strpos( $schema , 'dbtfy_quick_view' ) ) === false ) {
                    if( ( $pos = strrpos( $schema , ']' ) ) !== false ) {
                        $updated_schema    = substr_replace( $schema , ",".$addon_schema."]" , $pos );
                        $update_schema_settings = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'config/settings_schema.json', 'value' => $updated_schema] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update schema on quick-view addon throws client exception');
            }
            catch(\Exception $e){
                logger('update schema on quick-view addon throws exception');
            }

            // add snippet
            try{
                $addon_snippet = (string) '{%- comment -%}Please do not edit this file. Any modification can be lost as it is automatically updated by Debutify{%- endcomment -%}
{%- if settings.dbtfy_quick_view -%}

{%- if type == "container" -%}
  <div id="QuickViewContainer" class="dbtfy dbtfy-quick_view {% if settings.dbtfy_quick_view_hide_mobile %}small--hide{% endif %}"></div>
{%- else -%}
  <div class="dbtfy dbtfy-quick_view">
    <!-- Quick view button -->
    <div class="tag-wrapper tag-{{ settings.icon_placement }} {% if settings.dbtfy_quick_view_hide_mobile %}small--hide{% endif %}">
      <button class="qv-icon btn btn-outline-primary btn-square-small" data-section-id="{{ section.id }}" data-product-id="{{ product.id }}">
        <span class="fas fa-{{ settings.quick_view_icon }}"></span>
      </button>
    </div>

    {%- assign current_variant = product.selected_or_first_available_variant -%}
    {%- assign featured_image = current_variant.featured_image | default: product.featured_image -%}
    {%- assign enable_zoom = false -%}
    {%- assign product_image_zoom_size = "1024x1024" -%}
    {%- assign product_image_scale = "2" -%}

    <!-- modal -->
    <div class="qv-wrapper">
      <div id="QuickView-{{ section.id }}-{{ product.id }}" class="qv-modal">
        <div class="qv-modal-dialog">
          <div class="qv-modal-content animated {{ settings.quick_view_animation }}">

            <div class="qv-header">
              <a href="{{ product.url }}?variant={{ current_variant.id }}" class="qv-title h4">{{ product.title}}</a>
              <button type="button" class="qv-close-button btn btn-square-small icon-fallback-text">
                <span class="fas fa-times"></span>
              </button>
            </div>

            <div class="qv-modal-body wrapper-fluid">
              <div class="qv-grid grid">
                <!-- photos -->
                <div class="qv-photos grid__item medium--six-twelfths large--six-twelfths layout-thumbnail">
                  <div class="qv-slick product-single__photos slick-format slick-format-sm product-thumbnail__photos">

                    <div class="qv-image-{{featured_image.id}} product-single__photo--flex-wrapper">
                      <div class="product-single__photo--flex">
                        <div class="product-single__photo--container">
                          <div class="product-single__photo-wrapper image-wrapper"
                               style="padding-top:{{ 1 | divided_by: featured_image.aspect_ratio | times: 100}}%;">
                            {% assign img_url = featured_image | img_url: "1x1" | replace: "_1x1.", "_{width}x." %}
                            <img class="product-single__photo image lazyload {{ img_id_class }}"
                                 src="{{ featured_image | img_url: \'300x\' }}"
                                 data-src="{{ img_url }}"
                                 data-widths="[180, 360, 590, 720, 900, 1080, 1296, 1512, 1728, 2048]"
                                 data-aspectratio="{{ featured_image.aspect_ratio }}"
                                 data-sizes="auto"
                                 alt="{{ featured_image.alt | escape }}">
                            <noscript>
                              <img class="product-single__photo"
                                   src="{{ featured_image | img_url: \'master\' }}"
                                   alt="{{ featured_image.alt | escape }}">
                            </noscript>
                          </div>

                        </div>
                      </div>
                    </div>

                    {% for image in product.images %}
                      {% unless image contains featured_image %}
                      <div class="qv-image-{{image.id}} product-single__photo--flex-wrapper not-featured-image">
                        <div class="product-single__photo--flex">
                          <div class="product-single__photo--container">
                            <div class="product-single__photo-wrapper image-wrapper"
                                 style="padding-top:{{ 1 | divided_by: image.aspect_ratio | times: 100}}%;">
                              {% assign img_url = image | img_url: "1x1" | replace: "_1x1.", "_{width}x." %}
                              <img class="product-single__photo image lazyload"
                                   src="{{ image | img_url: \'300x\' }}"
                                   data-src="{{ img_url }}"
                                   data-widths="[180, 360, 540, 720, 900, 1080, 1296, 1512, 1728, 2048]"
                                   data-aspectratio="{{ image.aspect_ratio }}"
                                   data-sizes="auto"
                                   alt="{{ image.alt | escape }}">
                              <noscript>
                                <img class="product-single__photo" src="{{ image.src | img_url: \'master\' }}"
                                     alt="{{ image.alt | escape }}">
                              </noscript>
                            </div>
                          </div>
                        </div>
                      </div>
                      {% endunless %}
                    {% endfor %}
                  </div>

                  {% if product.images.size > 1 %}
                  <div class="product-single__thumbnails slick-format slick-format-sm grid grid--small {% if product.images.size < 6  %}slick-disabled{% endif %}" id="ProductThumbs">
                    <div class="grid__item one-fifth">
                      <a class="product-single__thumbnail">
                        <img class="product-single__thumb" src="{{ featured_image.src | img_url: \'150x150\', crop: \'center\' }}" alt="{{ featured_image.alt | escape }}">
                      </a>
                    </div>
                    {% for image in product.images %}
                    {% unless image contains featured_image %}
                    <div class="grid__item one-fifth">
                      <a class="product-single__thumbnail">
                        <img class="product-single__thumb" src="{{ image.src | img_url: \'150x150\', crop: \'center\' }}" alt="{{ image.alt | escape }}">
                      </a>
                    </div>
                    {% endunless %}
                    {% endfor %}
                  </div>
                  {% endif %}
                </div>

                <!-- details -->
                <div class="qv-details grid__item medium--six-twelfths large--six-twelfths {{variantStatus}}">
                  <div class="qv-price-wrapper price-wrapper">
                    <span class="qv-price-compare price-compare" {% unless current_variant.compare_at_price > current_variant.price %}style="display:none;"{% endunless %}>{{ current_variant.compare_at_price | money }}</span>
                    <span class="qv-price{% if current_variant.compare_at_price > current_variant.price %} on-sale{% endif %}">{{ current_variant.price | money }}</span>
                  </div>

                  {% if settings.grid_product_vendor %}
                  <p class="qv-vendor vendor">{{ product.vendor }}</p>
                  {% endif %}

                  {% include "review-badge", badge_template: "grid" %}

                  {% unless product.description == blank %}
                  <div class="qv-description rte">
                    {% assign desc = product.description | strip_html %}
                    {{ desc | truncatewords: 22 }}
                    <a href="{{ product.url }}?variant={{ current_variant.id }}" class="text-link continue-link">
                      {{ "products.product.full_details" | t }} <span class="fas fa-arrow-right"></span>
                    </a>
                  </div>
                  {% endunless %}

                  {% capture "form_classes" %}add-to-cart__form qv-form product-single__form{% endcapture %}
                  {% capture "form_id" %}QuickViewForm-{{ product.id }}{% endcapture %}

                  {% form "product", product, class:form_classes, id:form_id %}
                    {% unless product.has_only_default_variant %}
                    <div class="qv-variant-wrapper variant-wrapper grid grid-uniform grid--small">
                      {% for option in product.options_with_values %}
                      <div class="grid__item qv-variant-item radio-wrapper product-form__item">
                        <label class="qv-select-label single-option-radio__label" for="QuickViewSelect-{{ forloop.index0 }}-{{ product.id }}">{{ option.name | escape }}</label>
                        <select class="qv-select select--small full" id="QuickViewSelect-{{ forloop.index0 }}-{{ product.id }}" data-index="option{{ forloop.index }}">
                          {% for value in option.values %}
                          <option value="{{ value | escape }}"{% if option.selected_value == value %} selected="selected"{% endif %}>{{ value | escape }}</option>
                          {% endfor %}
                        </select>
                      </div>
                      {% endfor %}
                    </div>
                    {% endunless %}

                    <select name="id" class="qv-master-select" style="display:none;">
                      {% for variant in product.variants %}
                        {% if variant.available %}
                        <option {% if variant == product.selected_or_first_available_variant %}
                                selected="selected"
                                {% endif %}
                                data-sku="{{ variant.sku }}"
                                value="{{ variant.id }}"
                                data-variant="{{ variant.title | replace: \' / \', \'\' }}"
                                data-price="{{ variant.price | money }}"
                                {% if variant.compare_at_price > variant.price %}
                                data-price-compare="{{ variant.compare_at_price | money }}"
                                {% endif %}
                                data-image-id="{{ variant.image.id }}">
                          {{ variant.title }} - {{ variant.price | money_with_currency }}
                        </option>
                        {% else %}
                        <option disabled="disabled"
                                data-variant="{{ variant.title | replace: \' / \', \'\' }}"
                                data-price="{{ variant.price | money }}"
                                {% if variant.compare_at_price > variant.price %}
                                data-price-compare="{{ variant.compare_at_price | money }}"
                                {% endif %}
                                data-image-id="{{ variant.image.id }}">
                          {{ variant.title }} - {{ "products.product.sold_out" | t }}
                        </option>
                        {% endif %}
                      {% endfor %}
                    </select>

                    {% if settings.dbtfy_quick_view_quantity_selector %}
                    <div class="qv-quantity-wrapper">
                      <label for="QuickViewQuantity" class="qv-quantity-label">{{ "products.product.quantity" | t }}</label>
                      <div class="qv-qty-container">
                        <button class="btn btn-square-small qv-qty-adjust qv-qty-minus icon-fallback-text" type="button" aria-label="{{ \'cart.general.reduce_quantity\' | t }}">
                          <span class="fas fa-minus" aria-hidden="true"></span>
                          <span class="fallback-text" aria-hidden="true">&minus;</span>
                        </button>
                        <input type="number" class="qv-qty-input" name="quantity" id="QuickViewQuantity" value="1" min="1" hidden="hidden">
                        <button class="btn btn-square-small qv-qty-adjust qv-qty-plus icon-fallback-text" type="button" aria-label="{{ \'cart.general.increase_quantity\' | t }}">
                          <span class="fas fa-plus" aria-hidden="true"></span>
                          <span class="fallback-text" aria-hidden="true">+</span>
                        </button>
                      </div>
                    </div>
                    {% endif %}

                    <button type="submit" name="add"
                            class="btn--add-to-cart qv-addtocart-button btn btn--buy btn--full add-to-cart"
                            {% unless current_variant.available %} disabled="disabled"{% endunless %}>
                      <span class="btn__text">
                        <span class="fas fa-shopping-{{ settings.cart_icon }}"></span>
                        <span class="btn__add-to-cart-text">
                          {% if current_variant.available %}
                          {{ "products.product.add_to_cart" | t }}
                          {% else %}
                          {{ "products.product.sold_out" | t }}
                          {% endif %}
                        </span>
                      </span>
                    </button>
                  {% endform %}
                </div>
              </div>
            </div><!-- modal body -->
          </div><!-- modal content -->
        </div><!-- modal dialog -->
      </div><!-- modal -->
      <div class="qv-overlay"></div>
    </div><!-- modal wrapper -->

  </div>
{%- endif -%}

{%- endif -%}';

                $addon_snippet = addScriptTagCondition($shop, '{%- comment -%}Please do not edit this file. Any modification can be lost as it is automatically updated by Debutify{%- endcomment -%}', $addon_snippet);
               $create_addon_snippet = $shop->api()->request(
                            'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/dbtfy-quick-view.liquid', 'value' => $addon_snippet] ]
                );
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('add quick-view throws client exception');
            }
            catch(\Exception $e){
                logger('add quick-view throws exception');
            }

            // add scss
            try{
                $styles = (string) '/* start-dbtfy-quick-view */{% if settings.dbtfy_quick_view %}.dbtfy-quick_view{.qv-icon{opacity:0;@include screen($small){opacity:1}}.qv-modal{padding:0 $gutter-sm;position:fixed;top:0;left:0;z-index:$zindexDrawer + ($zindexIncrement*2);width:100%;height:100%;overflow:hidden;outline:0;display:none;&.qv-modal-open{display:block;overflow-x:hidden;overflow-y:auto;& + .qv-overlay{pointer-events:auto;opacity:$colorDrawerOverlayOpacity}}}.qv-modal-dialog{margin:$gutter auto;max-width:800px;@include display-flexbox;@include align-items(center);min-height:calc(100% - #{$gutter*2});pointer-events:none}.qv-modal-content{pointer-events:auto;background-color:$colorDrawer;border-radius:$borderRadius;overflow:hidden;color:$colorDrawerText;border-color:adaptive-color($colorDrawerDefault,$percentageColorBorder);position:relative;width:100%}.qv-header{border-bottom:$borders;border-color:adaptive-color($colorDrawerDefault,$percentageColorBorder);padding:$gutter-sm;@include display-flexbox;@include align-items(center)}.qv-title{color:$colorDrawerText;margin-bottom:0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;text-align:left}.qv-close-button{margin-left:auto;@include button($colorDrawerDefault,$colorDrawerText)}.qv-modal-body{padding-bottom:$gutter;padding-top:$gutter}.qv-overlay{background-color:$colorOverlay;position:fixed;left:0;right:0;top:0;bottom:0;width:100%;height:100%;opacity:0;pointer-events:none;z-index:$zindexDrawer + $zindexIncrement;@include transition($transitionDrawers)}.qv-details{.qv-price-wrapper{font-size:$baseFontSize-lg;border-color:adaptive-color($colorDrawerDefault,$percentageColorBorder);@include screen($small){margin-top:$spacer;background-color:$colorDrawerDefault}}.qv-price-compare{margin-right:$spacer-sm}.qv-quantity-wrapper{margin-bottom:$spacer}.qv-select{@include button($colorDrawerDefault,$colorDrawerText);@include placeholder($colorDrawerText)}.review-badge>*{margin-bottom:$spacer}.qv-qty-container{position:relative;width:100%}.qv-qty-input{text-align:center;width:100%;@include inputSmall;-moz-appearance:textfield;&::-webkit-outer-spin-button,&::-webkit-inner-spin-button{display:none;-webkit-appearance:none;margin:0}}.qv-qty-adjust{position:absolute;top:0;z-index:1;overflow:hidden;@include prefix("user-select","none");@include backface(hidden)}.qv-qty-minus{left:0}.qv-qty-plus{right:0}.qv-addtocart-button{margin-bottom:0;@include button($colorDrawerBuy,$colorDrawerButtonText)}}}.grid-product__wrapper:hover{.qv-icon{opacity:1}}{% endif %}/* end-dbtfy-quick-view */';

                $theme_style_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/theme.scss.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $theme_style_content , 'start-dbtfy-quick-view' ) ) === false ) {

                    $new_theme_styles = str_replace($theme_style_content, $theme_style_content.$styles, $theme_style_content);

                    logger('doesnt exist on css='.$new_theme_styles);
                    $add_styles = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/theme.scss.liquid', 'value' => $new_theme_styles] ]
                    );
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update CSS on quick-view addon throws client exception'.json_encode($e));
            }
            catch(\Exception $e){
                logger('update CSS on quick-view addon throws exception');
            }

            // add include
            try{
                $product_template = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'layout/theme.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $product_template , 'dbtfy-quick-view' ) ) === false ) {
                    if( ( $pos = strrpos( $product_template , '</body>' ) ) !== false ) {
                        $new_prod_template = str_replace('</body>', '{% include "dbtfy-quick-view", type: "container" %} </body>', $product_template);
                        $update_prod_template = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'layout/theme.liquid', 'value' => $new_prod_template] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update quick-view addon include throws client exception');
            }
            catch(\Exception $e){
                logger('update quick-view addon include throws exception');
            }

            // add include
            try{
                $product_template = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/product-grid-item.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $product_template , 'dbtfy-quick-view' ) ) === false ) {
                    if( ( $pos = strrpos( $product_template , '{% include "dbtfy-collection-addtocart" %}' ) ) !== false ) {
                        $new_prod_template = str_replace('{% include "dbtfy-collection-addtocart" %}', '{% include "dbtfy-discount-saved" %} {% include "dbtfy-collection-addtocart" %}', $product_template);
                        $update_prod_template = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'snippets/product-grid-item.liquid', 'value' => $new_prod_template] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update quick-view addon include on product-grid-item throws client exception'.json_encode($e));
            }
            catch(\Exception $e){
                logger('update quick-view addon include on product-grid-item throws exception');
            }

            // add js addon
            try{
              $script= (string)'/* start-dbtfy-quick-view */
function themeQuickView() {
  {% if settings.dbtfy_quick_view %}
  function QuickView() {
    var qvContainer = $("#QuickViewContainer"),
        qvWrapper = $(".qv-wrapper"),
        qvIcon = $(".qv-icon");

    $.each(qvWrapper, function(){
      $(this).appendTo(qvContainer);
    });

    qvIcon.on("click", function(e){
      e.preventDefault();
      var qvSection = $(this).attr("data-section-id"),
          qvProductId = $(this).attr("data-product-id"),
          qvModal = $("#QuickView-"+ qvSection +"-"+ qvProductId),
          qvModalContent = qvModal.find(".qv-modal-content"),
          qvImages = qvModal.find(".qv-slick"),
          qvThumbnailImages = qvModal.find(".product-single__thumbnails"),
          qvMasterSelect = qvModal.find(".qv-master-select"),
          qvSelect = qvModal.find(".qv-select"),
          qvButton = qvModal.find(".qv-addtocart-button"),
          qvButtonText = qvButton.find(".btn__add-to-cart-text"),
          qvCloseButton = qvModal.find(".qv-close-button"),
          qvQuantityAdjust = qvModal.find(".qv-qty-adjust"),
          qvPrice = qvModal.find(".qv-price"),
          qvPriceCompare = qvModal.find(".qv-price-compare"),
          qvTextAvailable = "{{ \'products.product.add_to_cart\' | t }}",
          qvTextUnavailable = "{{ \'products.product.unavailable\' | t }}",
          qvTextSoldout = "{{ \'products.product.sold_out\' | t }}";

      function openQuickView(){
        qvModal.addClass("qv-modal-open");

        if(!qvImages.hasClass("slick-initialized")) {
          $(qvImages).slick({
            arrows: false,
            dots: false,
            adaptiveHeight: true,
            asNavFor: qvThumbnailImages
          });
          $(qvThumbnailImages).slick({
            slidesToShow: 5,
            slidesToScroll: 1,
            dots: false,
            arrows: false,
            focusOnSelect: true,
            asNavFor: qvImages
          });
        }
      }
      openQuickView();

      function closeQuickView() {
        qvModal.removeClass("qv-modal-open");
      }
      qvCloseButton.on("click", function() {
        closeQuickView();
      });
      $(document).mousedown(function(e){
        if (!qvModalContent.is(e.target) && qvModalContent.has(e.target).length === 0){
          closeQuickView();
        }
      });
      $(document).keyup(function(e) {
        if (e.keyCode === 27) {
          closeQuickView();
        }
      });

      function checkCartLoaded(){
        if( $("#CartDrawer").hasClass("js-drawer-open") ){
          qvButton.removeClass("btn--loading");
          qvButton.css("min-width","");
          closeQuickView();
        } else{
          setTimeout(checkCartLoaded, 100);
        }
      }
      qvButton.on("click", function() {
        var btnWidth = $(this).outerWidth();
        $(this).css("min-width",btnWidth);
        $(this).addClass("btn--loading");
        checkCartLoaded();
      });

      qvQuantityAdjust.on("click", function() {
        var $button = $(this);
        var $qtySelector = $button.parent().find("input");
        var qty = $qtySelector.val();

        if ($button.hasClass("qv-qty-plus")) {
          qty = parseFloat(qty) + 1;
        } else {
          if (qty > 1) {
            qty = parseFloat(qty) - 1;
          } else {
            qty = 1;
          }
        }
        $qtySelector.val(qty);
      });

      qvSelect.on("change", function(){
        var variant = [];
        $.each(qvSelect, function(){
          variant.push($(this).val());
        });

        var option = qvMasterSelect.find(\'option[data-variant="\'+variant.join(\'\')+\'"]\'),
        	imageId = option.data("image-id"),
        	optionPrice = option.attr("data-price"),
        	optionPriceCompare = option.attr("data-price-compare");

        qvPrice.text(optionPrice);

        if(typeof optionPriceCompare != "undefined"){
          console.log("show compare");
          qvPriceCompare.show();
          qvPrice.addClass("on-sale");
          qvPriceCompare.text(optionPriceCompare);
        }
        else{
          console.log("hide compare");
          qvPriceCompare.hide();
          qvPrice.removeClass("on-sale");
        }

        if(option.length) {
          option.prop("selected", true);

          if(option.attr("disabled")){
            qvButtonText.text(qvTextSoldout);
            qvButton.addClass("disabled").attr("disabled","disabled");
          }
          else {
            qvButtonText.text(qvTextAvailable);
            qvButton.removeClass("disabled").removeAttr("disabled");
          }

          if(imageId != "") {
            var index = qvModal.find(".qv-image-"+imageId).attr("data-slick-index");
            if(typeof index != "undefined") {
                qvModal.find(".qv-slick").slick("slickGoTo", parseInt(index));
            }
          }
       	}
       	else {
          qvButtonText.text(qvTextUnavailable);
          qvButton.addClass("disabled").attr("disabled","disabled");
       	}

      });
    });
  };

  function checkProductRecommendation(n){if($("#productRecommendationsSection")[0]){var c=1;!function o(){$(".product-recommendations")[0]?n():setTimeout(function(){10==c?n():(c++,o())},100)}()}else n()}
  checkProductRecommendation(QuickView);
  {% endif %}
};
/* end-dbtfy-quick-view */';

                // add js register
                $theme_js_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $theme_js_content , "/* start-register-quick-view */" ) ) === false ) {
                        $new_theme_js = str_replace('var sections = new theme.Sections();', 'var sections = new theme.Sections();/* start-register-quick-view */themeQuickView();/* end-register-quick-view */', $theme_js_content);

                    $add_js = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js] ]
                    );
                }

                $theme_js_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid'] ]
                )['body']['asset']['value'] ?? '';
                $replace_code= '/* start-dbtfy-addons */';
                if( ( $pos = strpos( $theme_js_content , '/* start-dbtfy-quick-view */' ) ) === false ) {
                    $new_theme_js = str_replace($replace_code, $replace_code.$script, $theme_js_content);

                    $add_js = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js] ]
                    );
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update js on quick-view addon throws client exception');
            }
            catch(\Exception $e){
                logger('update js on quick-view addon throws exception');
            }

        }
    }
}

// deactivate
if (! function_exists('deactivate_quick_view_addon')) {
    function deactivate_quick_view_addon($StoreThemes, $shop, $checkaddon) {
        foreach ($StoreThemes as $theme) {

            // remove schema
            $schema_get = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'config/settings_schema.json'] ]
            )['body'];

            if(!isset($schema_get['asset']['value']))
            {
                continue;
            }
            else
            {
                $schema = $schema_get['asset']['value'] ?? '';
            }

            if(str_contains($schema,'Quick view')){
                $json = json_decode($schema, true);
                $json = array_filter($json, function ($obj) {
                  if (stripos($obj['name'], 'Quick view') !== false) {
                      return false;
                  }
                  return true;
                });
                $value = json_encode(array_values($json));
                $updated_schema =  $value;
                $update_schema_settings = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'config/settings_schema.json', 'value' => $updated_schema] ]
                );
            }

            // remove scss
            $theme_style_content = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'assets/theme.scss.liquid'] ]
            )['body']['asset']['value'] ?? '';

            $addon_Style = (string) '/* start-dbtfy-quick-view */';
            $end = (string) '/* end-dbtfy-quick-view */';
            $string = ' ' . $theme_style_content;
            $ini = strpos($string, $addon_Style);

            if ($ini == 0) {
              $parsed = '';
            }else{
              $ini += strlen($addon_Style);
              $len = strpos($string, $end, $ini) - $ini;
              $parsed = substr($string, $ini, $len);
            }
            $values = $addon_Style.''.$parsed.''.$end;

            if(str_contains($theme_style_content,'.dbtfy-quick_view')){
                $value = str_replace($values, " ", $theme_style_content);
                $new_theme_styles = (string) $value;

                $update_styles = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/theme.scss.liquid', 'value' => $new_theme_styles] ]
                );
            }

            // remove snippet
            $delete_addon_snippet = $shop->api()->request(
                'DELETE',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'snippets/dbtfy-quick-view.liquid'] ]
            );

            // remove include
            $theme_layout = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'layout/theme.liquid'] ]
            )['body']['asset']['value'] ?? '';

            if(str_contains($theme_layout,'dbtfy-quick-view')){
                $value  =  explode('{% include "dbtfy-quick-view", type: "container" %}',$theme_layout,2);

                if(isset($value[0]) && isset($value[1])){
                    $value = $value[0].' '.$value[1];
                }
                else{
                    $value = (string) $theme_layout;
                }

                $new_theme_layout = (string) $value;
                $update_theme_layout = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'layout/theme.liquid', 'value' => $new_theme_layout] ]
                );
            }

            // remove include
            $product_template = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'snippets/product-grid-item.liquid'] ]
            )['body']['asset']['value'] ?? '';

            if(str_contains($product_template,'dbtfy-quick-view')){
                $value  =  explode('{% include "dbtfy-quick-view" %}',$product_template,2);

                if(isset($value[0]) && isset($value[1])){
                    $value = $value[0].' '.$value[1];
                }
                else{
                    $value = (string) $product_template;
                }

                $new_prod_template = (string) $value;
                $update_prod_template = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/product-grid-item.liquid', 'value' => $new_prod_template] ]
                );
            }

            // remove js addon
            try{
               $theme_js_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid'] ]
                )['body']['asset']['value'] ?? '';

                $addon_js = (string) '/* start-dbtfy-quick-view */';
                $end_js = (string) '/* end-dbtfy-quick-view */';
                $string_js = ' ' . $theme_js_content;
                $ini_js = strpos($string_js, $addon_js);
                if ($ini_js == 0) {
                    $parsed_js = '';
                } else{
                    $ini_js += strlen($addon_js);
                    $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
                    $parsed_js = substr($string_js, $ini_js, $len_js);
                }
                $value_js = $addon_js.''.$parsed_js.''.$end_js;
                if(!empty($theme_js_content) && str_contains($theme_js_content,'/* start-register-quick-view */')){
                    $value = str_replace($value_js, " ", $theme_js_content);
                    $new_theme_js = (string) $value;
                    if(str_contains($new_theme_js,'/* start-register-quick-view */')){
                        $js_initialize = (string) '/* start-register-quick-view */';
                        $end_js = (string) '/* end-register-quick-view */';
                        $string_js = ' ' . $new_theme_js;
                        $ini_js = strpos($string_js, $js_initialize);
                        if ($ini_js == 0) {
                            $parsed_js = '';
                        } else{
                            $ini_js += strlen($js_initialize);
                            $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
                            $parsed_js = substr($string_js, $ini_js, $len_js);
                        }
                        $value_js = $js_initialize.''.$parsed_js.''.$end_js;

                        $value = str_replace($value_js, " ", $new_theme_js);
                        $new_theme_js1 = (string) $value;
                        $update_js = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js1] ]
                        );
                    }
                    else{
                        $update_js = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('remove quick-view js client exception'.json_encode($e));
            }
            catch(\Exception $e){
                logger('remove quick-view js throws exception');
            }
        }
    }
}
?>
