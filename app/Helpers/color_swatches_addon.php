<?php
//activate
if (! function_exists('activate_colorswatches_addon')) {
    function activate_colorswatches_addon($StoreThemes, $shop) {
      	foreach ($StoreThemes as $theme) {

            // add schema
            try{
                $schema = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'config/settings_schema.json'] ]
                )['body']['asset']['value'] ?? '';

                $colorswatches_addon_schema = (string) '
  {
    "name": "Color swatches",
    "settings": [
      {
        "type": "header",
        "content": "Activation"
      },
      {
        "type": "checkbox",
        "id": "dbtfy_color_swatches",
        "label": "Activate",
        "default": false
      },
      {
        "type": "header",
        "content": "Settings"
      },
      {
        "type": "text",
        "id": "dbtfy_color_swatches_color",
        "label": "Variant options",
        "info": "Comma-separated",
        "default": "Color"
      },
      {
        "type": "select",
        "id": "dbtfy_color_swatches_file",
        "label": "File extensions type",
        "default": "jpg",
        "options": [
          {
            "value": "jpg",
            "label": "jpg"
          },
          {
            "value": "jpeg",
            "label": "jpeg"
          },
          {
            "value": "png",
            "label": "png"
          },
          {
            "value": "gif",
            "label": "gif"
          }
        ]
      },
      {
        "type": "header",
        "content": "Upload images"
      },
      {
        "type": "paragraph",
        "content": "1. At the bottom, click on Theme actions > Edit code"
      },
      {
        "type": "paragraph",
        "content": "2. On the left side, click the Assets heading to reveal your Assets content."
      },
      {
        "type": "paragraph",
        "content": "3. Under the Assets heading, click the Add a new asset link:"
      },
      {
        "type": "paragraph",
        "content": "* If you have a color called \'Déjà Vu Blue\', then name your image deja-vu-blue.jpg"
      },
      {
        "type": "paragraph",
        "content": "* If your color is \'Blue\/Gray\', then name your image blue-gray.jpg"
      },
      {
        "type": "paragraph",
        "content": "* If your color is \'Black\', then name your image black.jpg"
      }
    ]
  }';

                if( ( $badgePos = strpos( $schema , 'dbtfy_color_swatches' ) ) === false ) {
                    if( ( $pos = strrpos( $schema , ']' ) ) !== false ) {
                        $updated_schema    = substr_replace( $schema , ",".$colorswatches_addon_schema."]" , $pos );
                        $update_schema_settings = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'config/settings_schema.json', 'value' => $updated_schema] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update schema on color swatches addon throws client exception');
            }
            catch(\Exception $e){
                logger('update schema on color swatches addon throws exception');
            }

            // add snippet
            try{
                $color_swatches_snippet = (string) '{%- comment -%}Please do not edit this file. Any modification can be lost as it is automatically updated by Debutify{%- endcomment -%}
{% if product.available and product.variants.size > 1 and settings.dbtfy_color_swatches %}
{% assign file_extension = settings.dbtfy_color_swatches_file %}
{% assign swatch_list = settings.dbtfy_color_swatches_color | split: "," %}
<div class="dbtfy dbtfy-color_swatches">
  {% for swatch in swatch_list %}
    {% assign option_index = 0 %}
    {% for option in product.options_with_values %}
      {% if option.name == swatch %}
        {% assign option_index = forloop.index0 %}
        <div class="swatch clearfix" data-option-index="{{ option_index }}">
          <div class="header">{{ option.name }}</div>
          {% for value in option.values %}
            <input id="swatch-{{ option_index }}-{{ value | handle }}"
                   class="input-color_swatches"
                   type="radio"
                   {% if option.selected_value == value %} checked{% endif %}
                   value="{{ value | escape }}"
                   data-index="{{ option_index }}"
                   name="{{ option.name | handleize }}"
                   data-section-id="{{ section.id }}">

            <div data-value="{{ value | escape }}" class="swatch-element">
              <div class="tooltip">{{ value }}</div>
              {% assign swatch_img = value | handle | append: "." | append: file_extension %}
              <label for="swatch-{{ option_index }}-{{ value | handle }}" style=\'background-color: {{ value | split: " " | last | handle }}; background-image: url({{ swatch_img | asset_img_url: "100x100", crop: "center" }})\'></label>
            </div>
          {% endfor %}
          <style>
            #section-{{ section.id }} .product-form__item.grid__item:nth-child({{option_index | plus: 1}}){display:none;}
          </style>
        </div>
      {% endif %}
    {% endfor %}
  {% endfor %}
</div>
{% endif %}';

                $color_swatches_snippet = addScriptTagCondition($shop, '{%- comment -%}Please do not edit this file. Any modification can be lost as it is automatically updated by Debutify{%- endcomment -%}', $color_swatches_snippet);

               $create_colorswatches_snippet = $shop->api()->request(
                            'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/dbtfy-color-swatches.liquid', 'value' => $color_swatches_snippet] ]
                );
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('add color_swatches throws client exception');
            }
            catch(\Exception $e){
                logger('add color_swatches throws exception');
            }

            // add scss
            try{
                $styles = (string) '/* start-dbtfy-color-swatches */{% if settings.dbtfy_color_swatches %}$swatchWidth:$heightInputSmall;$swatchRadius:$circle;$tooltipWidth:100px;$arrowSize:$spacer-sm;.dbtfy-color_swatches{.header{margin-bottom:$spacer-xs}.swatch{margin-bottom:$spacer-sm;input{display:none}label{border-radius:$swatchRadius;float:left;min-width:$swatchWidth;height:$swatchWidth;margin:0;background-color:$colorDefault;background-repeat:no-repeat;background-size:150%;text-align:center;line-height:$swatchWidth;background-position:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}input:checked + .swatch-element{border-color:$colorSecondary}}.swatch-element{float:left;-webkit-transform:translateZ(0);-webkit-font-smoothing:antialiased;margin:0 $spacer-sm $spacer-sm 0;position:relative;padding:$spacer-xs;border:$borders;border-radius:$swatchRadius;font-size:$baseFontSize-sm;text-transform:capitalize;@include display-flexbox();@include justify-content(center)}.swatch .tooltip{z-index:$zindexOverBody;background:$colorBodyText;color:$colorBody;border-radius:$borderRadius;font-size:$baseFontSize-sm;padding:$spacer-sm;bottom:100%;position:absolute;width:$tooltipWidth;margin-bottom:$spacer;text-align:center;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;@include transform(translateY(10px));@include transition($transitions);@include display-flexbox();@include justify-content(center);filter:alpha(opacity=0);-khtml-opacity:0;-moz-opacity:0;opacity:0;visibility:hidden}.tooltip:after{border-left:solid transparent $arrowSize;border-right:solid transparent $arrowSize;border-top:solid $colorBodyText $arrowSize;bottom:-$arrowSize;content:" ";height:0;position:absolute;width:0}.swatch-element:hover .tooltip{filter:alpha(opacity=100);-khtml-opacity:1;-moz-opacity:1;opacity:1;visibility:visible;@include transform(translateY(0))}}{% endif %}/* end-dbtfy-color-swatches */';

                $theme_style_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/theme.scss.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $theme_style_content , 'start-dbtfy-color-swatches' ) ) === false ) {
                    $new_theme_styles = str_replace($theme_style_content, $theme_style_content.$styles, $theme_style_content);

                    $add_styles = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/theme.scss.liquid', 'value' => $new_theme_styles] ]
                    );
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update CSS on color_swatches addon throws client exception');
            }
            catch(\Exception $e){
                logger('update CSS on color_swatches addon throws exception');
            }

            // add include
            try{
                $product_template = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/product-template.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $product_template , 'dbtfy-color-swatches' ) ) === false ) {
                  if( ( $pos = strrpos( $product_template , "{% form 'product'" ) ) !== false ) {
                      $new_prod_template = str_replace("{% form 'product'", '{% include "dbtfy-color-swatches" %}{% form \'product\'', $product_template);
                      $update_prod_template = $shop->api()->request(
                          'PUT',
                          '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                          ['asset' => ['key' => 'snippets/product-template.liquid', 'value' => $new_prod_template] ]
                      );
                  }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update color_swatches on colorswatches addon throws client exception');
            }
            catch(\Exception $e){
                logger('update color_swatches on colorswatches addon throws exception');
            }

            // add js addon
            try{
              $script= (string)'/* start-dbtfy-color-swatches */function themeColorSwatches() { {% if settings.dbtfy_color_swatches %} var _0xfecb=["\x73\x65\x63\x74\x69\x6F\x6E\x49\x64","\x64\x61\x74\x61","\x69\x6E\x64\x65\x78","\x76\x61\x6C","\x23\x41\x64\x64\x54\x6F\x43\x61\x72\x74\x46\x6F\x72\x6D\x2D\x2D","\x70\x72\x6F\x64\x75\x63\x74\x2D\x66\x6F\x72\x6D\x5F\x5F\x69\x74\x65\x6D\x2D\x72\x61\x64\x69\x6F","\x68\x61\x73\x43\x6C\x61\x73\x73","\x2E\x72\x61\x64\x69\x6F\x2D\x77\x72\x61\x70\x70\x65\x72","\x63\x6C\x69\x63\x6B","\x74\x72\x69\x67\x67\x65\x72","\x2E\x73\x69\x6E\x67\x6C\x65\x2D\x6F\x70\x74\x69\x6F\x6E\x2D\x73\x65\x6C\x65\x63\x74\x6F\x72\x5F\x5F\x72\x61\x64\x69\x6F\x5B\x76\x61\x6C\x75\x65\x3D\x27","\x27\x5D","\x66\x69\x6E\x64","\x65\x71","\x2E\x73\x69\x6E\x67\x6C\x65\x2D\x6F\x70\x74\x69\x6F\x6E\x2D\x72\x61\x64\x69\x6F","\x63\x68\x61\x6E\x67\x65","\x2E\x73\x69\x6E\x67\x6C\x65\x2D\x6F\x70\x74\x69\x6F\x6E\x2D\x73\x65\x6C\x65\x63\x74\x6F\x72\x5F\x5F\x72\x61\x64\x69\x6F","\x2E\x69\x6E\x70\x75\x74\x2D\x63\x6F\x6C\x6F\x72\x5F\x73\x77\x61\x74\x63\x68\x65\x73"];function ColorSwatches(){$(_0xfecb[17])[_0xfecb[15]](function(){var _0x29c1x2=$(this),_0x29c1x3=_0x29c1x2[_0xfecb[1]](_0xfecb[0]),_0x29c1x4=_0x29c1x2[_0xfecb[1]](_0xfecb[2]),_0x29c1x5=_0x29c1x2[_0xfecb[3]](),_0x29c1x6=$(_0xfecb[4]+ _0x29c1x3);$(_0xfecb[7])[_0xfecb[6]](_0xfecb[5])?_0x29c1x6[_0xfecb[12]](_0xfecb[14])[_0xfecb[13]](_0x29c1x4)[_0xfecb[12]](_0xfecb[10]+ _0x29c1x5+ _0xfecb[11])[_0xfecb[9]](_0xfecb[8]):_0x29c1x6[_0xfecb[12]](_0xfecb[16])[_0xfecb[13]](_0x29c1x4)[_0xfecb[3]](_0x29c1x5)[_0xfecb[9]](_0xfecb[15])})}ColorSwatches() {% endif %} }; /* end-dbtfy-color-swatches */';


                // add js register
                $theme_js_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $theme_js_content , "/* start-register-color-swatches */" ) ) === false ) {
                        $new_theme_js = str_replace('var sections = new theme.Sections();', 'var sections = new theme.Sections();/* start-register-color-swatches */sections.register("product-template", themeColorSwatches);/* end-register-color-swatches */', $theme_js_content);

                    $add_js = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js] ]
                    );
                }

                $theme_js_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid'] ]
                )['body']['asset']['value'] ?? '';
                $replace_code= '/* start-dbtfy-addons */';
                if( ( $pos = strpos( $theme_js_content , '/* start-dbtfy-color-swatches */' ) ) === false ) {
                    $new_theme_js = str_replace($replace_code, $replace_code.$script, $theme_js_content);

                    $add_js = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js] ]
                    );
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update js on cookie_box addon throws client exception');
            }
            catch(\Exception $e){
                logger('update js on cookie_box addon throws exception');
            }

        }
    }
}

// deactivate
if (! function_exists('deactivate_colorswatches_addon')) {
    function deactivate_colorswatches_addon($StoreThemes, $shop, $checkaddon) {
        foreach ($StoreThemes as $theme) {

            // remove schema
            $schema_get = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'config/settings_schema.json'] ]
            )['body'];

            if(!isset($schema_get['asset']['value']))
            {
                deactivate_colorswatches_addon_curl($theme, $shop);
                continue;
            }
            else
            {
                $schema = $schema_get['asset']['value'] ?? '';
            }

            if(str_contains($schema,'Color swatches')){
                $json = json_decode($schema, true);
                $json = array_filter($json, function ($obj) {
                  if (stripos($obj['name'], 'Color swatches') !== false) {
                      return false;
                  }
                  return true;
                });
                $value = json_encode(array_values($json));
                $updated_schema =  $value;
                $update_schema_settings = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'config/settings_schema.json', 'value' => $updated_schema] ]
                );
            }

            // remove scss
            $theme_style_content = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'assets/theme.scss.liquid'] ]
            )['body']['asset']['value'] ?? '';

            $trustbadge_Style = (string) '/* start-dbtfy-color-swatches */';
            $end = (string) '/* end-dbtfy-color-swatches */';
            $string = ' ' . $theme_style_content;
            $ini = strpos($string, $trustbadge_Style);

            if ($ini == 0) {
              $parsed = '';
            }else{
              $ini += strlen($trustbadge_Style);
              $len = strpos($string, $end, $ini) - $ini;
              $parsed = substr($string, $ini, $len);
            }
            $values = $trustbadge_Style.''.$parsed.''.$end;

            if(str_contains($theme_style_content,'.dbtfy-color_swatches')){
                $value = str_replace($values, " ", $theme_style_content);
                $new_theme_styles = (string) $value;

                $update_styles = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/theme.scss.liquid', 'value' => $new_theme_styles] ]
                );
            }

            // remove snippet
            $delete_colorswatches_snippet = $shop->api()->request(
                'DELETE',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'snippets/dbtfy-color-swatches.liquid'] ]
            );

            // remove include
            $product_template = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'snippets/product-template.liquid'] ]
            )['body']['asset']['value'] ?? '';

            if(str_contains($product_template,'dbtfy-color-swatches')){
                $value  =  explode('{% include "dbtfy-color-swatches" %}',$product_template,2);

                if(isset($value[0]) && isset($value[1])){
                    $value = $value[0].' '.$value[1];
                }
                else{
                    $value = (string) $product_template;
                }

                $new_prod_template = (string) $value;
                $update_prod_template = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/product-template.liquid', 'value' => $new_prod_template] ]
                );
            }

            // remove js addon
            try{
               $theme_js_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid'] ]
                )['body']['asset']['value'] ?? '';

                $colorswatches_js = (string) '/* start-dbtfy-color-swatches */';
                $end_js = (string) '/* end-dbtfy-color-swatches */';
                $string_js = ' ' . $theme_js_content;
                $ini_js = strpos($string_js, $colorswatches_js);
                if ($ini_js == 0) {
                    $parsed_js = '';
                } else{
                    $ini_js += strlen($colorswatches_js);
                    $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
                    $parsed_js = substr($string_js, $ini_js, $len_js);
                }
                $value_js = $colorswatches_js.''.$parsed_js.''.$end_js;
                if(!empty($theme_js_content) && str_contains($theme_js_content,'/* start-dbtfy-color-swatches */')){
                    $value = str_replace($value_js, " ", $theme_js_content);
                    $new_theme_js = (string) $value;
                    if(str_contains($new_theme_js,'/* start-register-color-swatches */')){
                        $colorswatches_js1 = (string) '/* start-register-color-swatches */';
                        $end_js = (string) '/* end-register-color-swatches */';
                        $string_js = ' ' . $new_theme_js;
                        $ini_js = strpos($string_js, $colorswatches_js1);
                        if ($ini_js == 0) {
                            $parsed_js = '';
                        } else{
                            $ini_js += strlen($colorswatches_js1);
                            $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
                            $parsed_js = substr($string_js, $ini_js, $len_js);
                        }
                        $value_js = $colorswatches_js1.''.$parsed_js.''.$end_js;

                        $value = str_replace($value_js, " ", $new_theme_js);
                        $new_theme_js1 = (string) $value;
                        $update_js = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js1] ]
                        );
                    }
                    else{
                        $update_js = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'assets/dbtfy-addons.js.liquid', 'value' => $new_theme_js] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('add color_swatches throws client exception');
            }
            catch(\Exception $e){
                logger('add color_swatches throws exception');
            }
        }
    }
}



if (! function_exists('deactivate_colorswatches_addon_curl')) {
  function deactivate_colorswatches_addon_curl($theme, $shop) {

    // remove schema
    $schema = getThemeFileCurl($shop, $theme, 'config/settings_schema.json');

    if(str_contains($schema,'Color swatches')){
        $json = json_decode($schema, true);
        $json = array_filter($json, function ($obj) {
          if (stripos($obj['name'], 'Color swatches') !== false) {
              return false;
          }
          return true;
        });
        $value = json_encode(array_values($json));
        $updated_schema =  $value;
        $update_schema_settings = putThemeFileCurl($shop, $theme, $updated_schema, 'config/settings_schema.json');
    }

    // remove scss
    $theme_style_content = getThemeFileCurl($shop, $theme, 'assets/theme.scss.liquid');

    $trustbadge_Style = (string) '/* start-dbtfy-color-swatches */';
    $end = (string) '/* end-dbtfy-color-swatches */';
    $string = ' ' . $theme_style_content;
    $ini = strpos($string, $trustbadge_Style);

    if ($ini == 0) {
      $parsed = '';
    }else{
      $ini += strlen($trustbadge_Style);
      $len = strpos($string, $end, $ini) - $ini;
      $parsed = substr($string, $ini, $len);
    }
    $values = $trustbadge_Style.''.$parsed.''.$end;

    if(str_contains($theme_style_content,'.dbtfy-color_swatches')){
        $value = str_replace($values, " ", $theme_style_content);
        $new_theme_styles = (string) $value;

        $update_styles = putThemeFileCurl($shop, $theme, $new_theme_styles, 'assets/theme.scss.liquid');
    }

    // remove snippet
    $delete_colorswatches_snippet = deleteThemeFilesCurl($shop, $theme, 'snippets/dbtfy-color-swatches.liquid');

    // remove include
    $product_template = getThemeFileCurl($shop, $theme, 'snippets/product-template.liquid');

    if(str_contains($product_template,'dbtfy-color-swatches')){
        $value  =  explode('{% include "dbtfy-color-swatches" %}',$product_template,2);

        if(isset($value[0]) && isset($value[1])){
            $value = $value[0].' '.$value[1];
        }
        else{
            $value = (string) $product_template;
        }

        $new_prod_template = (string) $value;
        $update_prod_template = putThemeFileCurl($shop, $theme, $new_prod_template, 'snippets/product-template.liquid');
    }

    // remove js addon
    try{
       $theme_js_content = getThemeFileCurl($shop, $theme, 'assets/dbtfy-addons.js.liquid');
        if ($theme_js_content == null)
        {
            $theme_js_content = '';
        }
        $colorswatches_js = (string) '/* start-dbtfy-color-swatches */';
        $end_js = (string) '/* end-dbtfy-color-swatches */';
        $string_js = ' ' . $theme_js_content;
        $ini_js = strpos($string_js, $colorswatches_js);
        if ($ini_js == 0) {
            $parsed_js = '';
        } else{
            $ini_js += strlen($colorswatches_js);
            $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
            $parsed_js = substr($string_js, $ini_js, $len_js);
        }
        $value_js = $colorswatches_js.''.$parsed_js.''.$end_js;
        if(!empty($theme_js_content) && str_contains($theme_js_content,'/* start-dbtfy-color-swatches */')){
            $value = str_replace($value_js, " ", $theme_js_content);
            $new_theme_js = (string) $value;
            if(str_contains($new_theme_js,'/* start-register-color-swatches */')){
                $colorswatches_js1 = (string) '/* start-register-color-swatches */';
                $end_js = (string) '/* end-register-color-swatches */';
                $string_js = ' ' . $new_theme_js;
                $ini_js = strpos($string_js, $colorswatches_js1);
                if ($ini_js == 0) {
                    $parsed_js = '';
                } else{
                    $ini_js += strlen($colorswatches_js1);
                    $len_js = strpos($string_js, $end_js, $ini_js) - $ini_js;
                    $parsed_js = substr($string_js, $ini_js, $len_js);
                }
                $value_js = $colorswatches_js1.''.$parsed_js.''.$end_js;

                $value = str_replace($value_js, " ", $new_theme_js);
                $new_theme_js1 = (string) $value;
                $update_js = putThemeFileCurl($shop, $theme, $new_theme_js1, 'assets/dbtfy-addons.js.liquid');
            }
            else{
                $update_js = putThemeFileCurl($shop, $theme, $new_theme_js, 'assets/dbtfy-addons.js.liquid');
            }
        }
    }
    catch(\GuzzleHttp\Exception\ClientException $e){
        logger('add color_swatches throws client exception');
    }
    catch(\Exception $e){
        logger('add color_swatches throws exception');
    }
  }
}
?>
