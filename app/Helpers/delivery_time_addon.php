<?php
//activate
if (! function_exists('activate_deliverytime_addon')) {
    function activate_deliverytime_addon($StoreThemes, $shop) {
      	foreach ($StoreThemes as $theme) {

            // add schema
            try{
                $schema = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'config/settings_schema.json'] ]
                )['body']['asset']['value'] ?? '';

                $liveview_addon_schema = (string) '
{
    "name": "Delivery time",
    "settings": [
      {
        "type": "header",
        "content": "Activation"
      },
      {
        "type": "checkbox",
        "id": "dbtfy_delivery_time",
        "label": "Activate",
        "default": false
      },
      {
        "type": "header",
        "content": "Text settings"
      },
      {
        "type": "text",
        "id": "dbtfy_delivery_time_icon",
        "label": "Icon",
        "default": "shipping-fast",
        "info": "Enter the name of any free solid icons on [FontAwesome](https:\/\/fontawesome.com\/icons?d=gallery&s=solid&m=free)"
      },
      {
        "type": "text",
        "id": "dbtfy_delivery_time_prefix",
        "label": "Prefix",
        "default": "Get it between"
      },
      {
        "type": "text",
        "id": "dbtfy_delivery_time_separator",
        "label": "Separator",
        "default": "-"
      },
      {
        "type": "text",
        "id": "dbtfy_delivery_time_suffix",
        "label": "Suffix"
      },
      {
        "type": "header",
        "content": "Delivery settings"
      },
      {
        "type": "checkbox",
        "id": "dbtfy_delivery_time_date",
        "label": "Show as date",
        "default": true
      },
      {
        "type": "range",
        "id": "dbtfy_delivery_time_from",
        "label": "Min delivery time (days)",
        "min": 1,
        "max": 60,
        "step": 1,
        "default": 7
      },
      {
        "type": "range",
        "id": "dbtfy_delivery_time_to",
        "label": "Max delivery time (days)",
        "min": 1,
        "max": 60,
        "step": 1,
        "default": 14
      },
      {
        "type": "text",
        "id": "dbtfy_delivery_time_format",
        "label": "Date format",
        "default": "%b %d",
        "info": "%a %b %d %Y"
      }
    ]
  }';

                if( ( $badgePos = strpos( $schema , 'dbtfy_delivery_time' ) ) === false ) {
                    if( ( $pos = strrpos( $schema , ']' ) ) !== false ) {
                        $updated_schema    = substr_replace( $schema , ",".$liveview_addon_schema."]" , $pos );
                        $update_schema_settings = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'config/settings_schema.json', 'value' => $updated_schema] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update schema on live view addon throws client exception');
            }
            catch(\Exception $e){
                logger('update schema on live view addon throws exception');
            }

            // add snippet
            try{
                $snippet = (string) '{%- comment -%}Please do not edit this file. Any modification can be lost as it is automatically updated by Debutify{%- endcomment -%}
{%- if settings.dbtfy_delivery_time -%}
<div class="dbtfy dbtfy-delivery_time">
  {% assign minDate = settings.dbtfy_delivery_time_from | times: 86400 %}
  {% assign maxDate = settings.dbtfy_delivery_time_to | times: 86400 %}

  {% if settings.dbtfy_delivery_time_date %}
    {% assign minDateFinal = "now" | date:"%s" | plus:minDate | date: settings.dbtfy_delivery_time_format %}
    {% assign maxDateFinal = "now" | date:"%s" | plus:maxDate | date: settings.dbtfy_delivery_time_format %}
  {% else %}
    {% assign minDateFinal = settings.dbtfy_delivery_time_from %}
    {% assign maxDateFinal = settings.dbtfy_delivery_time_to %}
  {% endif %}

  <div id="DeliveryTime">
    {% unless settings.dbtfy_delivery_time_icon == blank %}
    <span class="fas fa-{{ settings.dbtfy_delivery_time_icon }} fa-fw"></span>
    {% endunless %}
    <span>{{ settings.dbtfy_delivery_time_prefix }}</span>
    <strong class="from-text-delivery_time">{{ minDateFinal }}</strong>
    <span>{{ settings.dbtfy_delivery_time_separator }}</span>
    <strong class="to-text-delivery_time">{{ maxDateFinal }}</strong>
    <span>{{ settings.dbtfy_delivery_time_suffix }}</span>
  </div>
</div>
{%- endif -%}';

                $snippet = addScriptTagCondition($shop, '{%- comment -%}Please do not edit this file. Any modification can be lost as it is automatically updated by Debutify{%- endcomment -%}', $snippet);

                $create_trustbadge_snippet = $shop->api()->request(
                    'PUT',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/dbtfy-delivery-time.liquid', 'value' => $snippet] ]
                );
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('add delivery_time throws client exception');
            }
            catch(\Exception $e){
                logger('add delivery_time throws exception');
            }

            // add scss
            try{
                $styles = (string) '/* start-dbtfy-delivery-time */{% if settings.dbtfy_delivery_time %}.dbtfy-delivery_time{#DeliveryTime{margin-bottom:$spacer}}{% endif %}/* end-dbtfy-delivery-time */';

                $theme_style_content = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/theme.scss.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $theme_style_content , 'start-dbtfy-delivery-time' ) ) === false ) {
                    $new_theme_styles = str_replace($theme_style_content, $theme_style_content.$styles, $theme_style_content);

                    $add_styles = $shop->api()->request(
                        'PUT',
                        '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                        ['asset' => ['key' => 'assets/theme.scss.liquid', 'value' => $new_theme_styles] ]
                    );
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update CSS on delivery_time addon throws client exception');
            }
            catch(\Exception $e){
                logger('update CSS on delivery_time addon throws exception');
            }

            // add include
            try{
                $product_template = $shop->api()->request(
                    'GET',
                    '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/product-template.liquid'] ]
                )['body']['asset']['value'] ?? '';

                if( ( $pos = strpos( $product_template , 'dbtfy-delivery-time' ) ) === false ) {
                    if( ( $pos = strrpos( $product_template , '<meta itemprop="priceCurrency" content="{{ shop.currency }}">' ) ) !== false ) {
                        $new_prod_template = str_replace('<meta itemprop="priceCurrency" content="{{ shop.currency }}">', '{% include "dbtfy-delivery-time" %}<meta itemprop="priceCurrency" content="{{ shop.currency }}">', $product_template);
                        $update_prod_template = $shop->api()->request(
                            'PUT',
                            '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                            ['asset' => ['key' => 'snippets/product-template.liquid', 'value' => $new_prod_template] ]
                        );
                    }
                }
            }
            catch(\GuzzleHttp\Exception\ClientException $e){
                logger('update delivery_time on trustbadge addon throws client exception');
            }
            catch(\Exception $e){
                logger('update delivery_time on trustbadge addon throws exception');
            }

        }
    }
}

// deactivate
if (! function_exists('deactivate_deliverytime_addon')) {
    function deactivate_deliverytime_addon($StoreThemes, $shop, $checkaddon) {
        foreach ($StoreThemes as $theme) {

            // remove schema
            $schema_get = $shop->api()->request(
                'GET',
                '/admin/api/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'config/settings_schema.json'] ]
            )['body'];

            if(!isset($schema_get['asset']['value']))
            {
                deactivate_deliverytime_addon_curl($theme, $shop);
                continue;
            }
            else
            {
                $schema = $schema_get['asset']['value'] ?? '';
            }

            $json = json_decode($schema, true);
            $json = array_filter($json, function ($obj) {
                if (stripos($obj['name'], 'Delivery time') !== false) {
                    return false;
                }
                return true;
            });

            if(str_contains($schema,'Delivery time')){
                $value = json_encode(array_values($json));
                $updated_schema = $value;

                $update_schema_settings = $shop->api()->request(
                    'PUT',
                    '/admin/api/2019-04/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'config/settings_schema.json', 'value' => $updated_schema] ]
                );
            }

            // remove scss
            $theme_style_content = $shop->api()->request(
                'GET',
                '/admin/api/2019-04/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'assets/theme.scss.liquid'] ]
            )['body']['asset']['value'] ?? '';

            // old style
            $styles = (string) '/*================ _Delivery_time ================*/ .dbtfy-delivery_time{ #DeliveryTime{ margin-bottom:$spacer; } }';
            $trustbadge_Style2 = (string) '/*================ _Delivery_time ================*/';
            $end2 = (string) ' margin-bottom:$spacer; } }';
            $string2 = ' ' . $theme_style_content;
            $ini2 = strpos($string2, $trustbadge_Style2);
            if ($ini2 == 0) {
                $parsed2 = '';
            }else{
                $ini2 += strlen($trustbadge_Style2);
                $len2 = strpos($string2, $end2, $ini2) - $ini2;
                $parsed2 = substr($string2, $ini2, $len2);
            }

            // old style
            $trustbadge_Style3 = (string) '/*================ start-dbtfy-Delivery_time ================*/';
            $end3 = (string) '/*================ end-dbtfy-Delivery_time ================*/';
            $string3 = ' ' . $theme_style_content;
            $ini3 = strpos($string3, $trustbadge_Style3);
            if ($ini3 == 0) {
                $parsed3 = '';
            }else{
                $ini3 += strlen($trustbadge_Style3);
                $len3 = strpos($string3, $end3, $ini3) - $ini3;
                $parsed3 = substr($string3, $ini3, $len3);
            }

            // new style
            $trustbadge_Style = (string) '/* start-dbtfy-delivery-time */';
            $end = (string) '/* end-dbtfy-delivery-time */';
            $string = ' ' . $theme_style_content;
            $ini = strpos($string, $trustbadge_Style);
            if ($ini == 0) {
                $parsed = '';
            }else{
                $ini += strlen($trustbadge_Style);
                $len = strpos($string, $end, $ini) - $ini;
                $parsed = substr($string, $ini, $len);
            }

            //result
            if($parsed3){
                 $values = $trustbadge_Style3.''.$parsed3.''.$end3;
             }
             else if($parsed2){
                 $values = $trustbadge_Style2.''.$parsed2.''.$end2;
             }
             else{
                if($parsed){
                    $values = $trustbadge_Style.''.$parsed.''.$end;
                }else{
                    $values = $styles;
                }
            }

            if(str_contains($theme_style_content,'dbtfy-delivery_time')){
                $value = str_replace($values, " ", $theme_style_content);
                $new_theme_styles = (string) $value;

                $update_styles = $shop->api()->request(
                    'PUT',
                    '/admin/api/2019-04/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'assets/theme.scss.liquid', 'value' => $new_theme_styles] ]
                );
            }

            // remove snippet
            $delete_trustbadge_snippet = $shop->api()->request(
                'DELETE',
                '/admin/api/2019-04/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'snippets/dbtfy-delivery-time.liquid'] ]
            );

            // remove snippet
            $product_template = $shop->api()->request(
                'GET',
                '/admin/api/2019-04/themes/'.$theme->shopify_theme_id.'/assets.json',
                ['asset' => ['key' => 'snippets/product-template.liquid'] ]
            )['body']['asset']['value'] ?? '';

            // remove include
            if(str_contains($product_template,'dbtfy-delivery-time')){
                $value  =  explode('{% include "dbtfy-delivery-time" %}',$product_template,2);
                if(isset($value[0]) && isset($value[1])){
                    $value = $value[0].' '.$value[1];
                }
                else{
                    $value = (string) $product_template;
                }
                $new_prod_template = (string) $value;
                $update_prod_template = $shop->api()->request(
                    'PUT',
                    '/admin/api/2019-04/themes/'.$theme->shopify_theme_id.'/assets.json',
                    ['asset' => ['key' => 'snippets/product-template.liquid', 'value' => $new_prod_template] ]
                );
            }
        }
    }
}


if (! function_exists('deactivate_deliverytime_addon_curl')) {
    function deactivate_deliverytime_addon_curl($theme, $shop) {

        // remove schema
        $schema = getThemeFileCurl($shop, $theme, 'config/settings_schema.json');

        $json = json_decode($schema, true);
        $json = array_filter($json, function ($obj) {
            if (stripos($obj['name'], 'Delivery time') !== false) {
                return false;
            }
            return true;
        });

        if(str_contains($schema,'Delivery time')){
            $value = json_encode(array_values($json));
            $updated_schema = $value;

            $update_schema_settings = putThemeFileCurl($shop, $theme, $updated_schema, 'config/settings_schema.json');
        }

        // remove scss
        $theme_style_content = getThemeFileCurl($shop, $theme, 'assets/theme.scss.liquid');

        // old style
        $styles = (string) '/*================ _Delivery_time ================*/ .dbtfy-delivery_time{ #DeliveryTime{ margin-bottom:$spacer; } }';
        $trustbadge_Style2 = (string) '/*================ _Delivery_time ================*/';
        $end2 = (string) ' margin-bottom:$spacer; } }';
        $string2 = ' ' . $theme_style_content;
        $ini2 = strpos($string2, $trustbadge_Style2);
        if ($ini2 == 0) {
            $parsed2 = '';
        }else{
            $ini2 += strlen($trustbadge_Style2);
            $len2 = strpos($string2, $end2, $ini2) - $ini2;
            $parsed2 = substr($string2, $ini2, $len2);
        }

        // old style
        $trustbadge_Style3 = (string) '/*================ start-dbtfy-Delivery_time ================*/';
        $end3 = (string) '/*================ end-dbtfy-Delivery_time ================*/';
        $string3 = ' ' . $theme_style_content;
        $ini3 = strpos($string3, $trustbadge_Style3);
        if ($ini3 == 0) {
            $parsed3 = '';
        }else{
            $ini3 += strlen($trustbadge_Style3);
            $len3 = strpos($string3, $end3, $ini3) - $ini3;
            $parsed3 = substr($string3, $ini3, $len3);
        }

        // new style
        $trustbadge_Style = (string) '/* start-dbtfy-delivery-time */';
        $end = (string) '/* end-dbtfy-delivery-time */';
        $string = ' ' . $theme_style_content;
        $ini = strpos($string, $trustbadge_Style);
        if ($ini == 0) {
            $parsed = '';
        }else{
            $ini += strlen($trustbadge_Style);
            $len = strpos($string, $end, $ini) - $ini;
            $parsed = substr($string, $ini, $len);
        }

        //result
        if($parsed3){
             $values = $trustbadge_Style3.''.$parsed3.''.$end3;
         }
         else if($parsed2){
             $values = $trustbadge_Style2.''.$parsed2.''.$end2;
         }
         else{
            if($parsed){
                $values = $trustbadge_Style.''.$parsed.''.$end;
            }else{
                $values = $styles;
            }
        }

        if(str_contains($theme_style_content,'dbtfy-delivery_time')){
            $value = str_replace($values, " ", $theme_style_content);
            $new_theme_styles = (string) $value;

            $update_styles = putThemeFileCurl($shop, $theme, $new_theme_styles, 'assets/theme.scss.liquid');
        }

        // remove snippet
        $delete_trustbadge_snippet = deleteThemeFilesCurl($shop, $theme, 'snippets/dbtfy-delivery-time.liquid');

        // remove snippet
        $product_template = getThemeFileCurl($shop, $theme, 'snippets/product-template.liquid');

        // remove include
        if(str_contains($product_template,'dbtfy-delivery-time')){
            $value  =  explode('{% include "dbtfy-delivery-time" %}',$product_template,2);
            if(isset($value[0]) && isset($value[1])){
                $value = $value[0].' '.$value[1];
            }
            else{
                $value = (string) $product_template;
            }
            $new_prod_template = (string) $value;
            $update_prod_template = putThemeFileCurl($shop, $theme, $new_prod_template, 'snippets/product-template.liquid');
        }
    }
}
?>
